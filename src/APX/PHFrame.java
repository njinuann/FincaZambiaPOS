/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BRFrame.java
 *
 * Created on Jun 20, 2011, 11:07:55 PM
 */
package APX;

import Mobile.BSPanelMOB;
import Mobile.EIBillerPanelMOB;
import Mobile.EIProcCodePanelMOB;
import Mobile.EITxnMOB;
import Mobile.TCPanelMOB;
import PHilae.*;
import SMS.SMSConfigPanel;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListModel;
import static javax.swing.SwingConstants.LEFT;
import static javax.swing.SwingConstants.RIGHT;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import org.jpos.iso.ISOMsg;
import org.jpos.iso.gui.ISOMeter;
import org.jpos.iso.gui.ISOMsgPanel;

/**
 *
 * @author Pecherk
 */
public class PHFrame extends javax.swing.JFrame
{

    ListModel posTxnLog = null, mobTxnLog = null;
    ArrayList<EITxn> posTxnList = new ArrayList();
    ArrayList<EITxnMOB> mobTxnList = new ArrayList();
    private final EILogin eiLogin = new EILogin(new TDClient());
    private final BSPanel settingsPanel = new BSPanel(PHController.posModule);
    private final BSPanelMOB settingsPanelMob = new BSPanelMOB(PHController.MobModule);

    /**
     * Creates new form MAINFrame
     */
    public PHFrame()
    {
        initComponents();
        showPosTxnTree();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        xapiTxnPanel = new javax.swing.JPanel();
        eiTxnTableScroller = new javax.swing.JScrollPane();
        xapiTxnTable = new javax.swing.JTable();
        chargesDialog = new javax.swing.JDialog();
        chargesDialogMob = new javax.swing.JDialog();
        mainSplitPane = new javax.swing.JSplitPane();
        treePanel = new javax.swing.JPanel();
        txnTreeScroller = new javax.swing.JScrollPane();
        txnTree = new javax.swing.JTree();
        treeSeparator = new javax.swing.JSeparator();
        posRadioBtn = new javax.swing.JRadioButton();
        mobRadioBtn = new javax.swing.JRadioButton();
        rightSplitPane = new javax.swing.JSplitPane();
        msgSplitPane = new javax.swing.JSplitPane();
        receivedMessagePanel = new javax.swing.JPanel();
        incomingTableScroller = new javax.swing.JScrollPane();
        incomingTable = new javax.swing.JTable();
        responseMessagePanel = new javax.swing.JPanel();
        outgoingTableScroller = new javax.swing.JScrollPane();
        outgoingTable = new javax.swing.JTable();
        displayScroller = new javax.swing.JScrollPane();
        leftToolBar = new javax.swing.JToolBar();
        shutdownButton = new javax.swing.JButton();
        aboutButton = new javax.swing.JButton();
        isometerToolBar = new javax.swing.JToolBar();
        menuBar = new javax.swing.JMenuBar();
        bridgeMenu = new javax.swing.JMenu();
        shutdownMenuItem = new javax.swing.JMenuItem();
        agencyMenu = new javax.swing.JMenu();
        agencySettingsMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        chargesMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        eiTerminalMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        extractDataFilesMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        procCodeMenuItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        suspendServiceCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        agencyMenu1 = new javax.swing.JMenu();
        agencySettingsMenuItemMob = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        chargesMenuItemMob = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        eiTerminalMenuItemMob = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        extractDataFilesMenuItemMob = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();
        suspendServiceCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        smsMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        xapiTxnPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Processed Transactions"), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));

        eiTxnTableScroller.setBorder(null);

        xapiTxnTable.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));
        xapiTxnTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Field", "Content", "Description"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        eiTxnTableScroller.setViewportView(xapiTxnTable);

        incomingTableScroller.setViewportView(new ISOMsgPanel(new ISOMsg()).createISOMsgTable());

        javax.swing.GroupLayout xapiTxnPanelLayout = new javax.swing.GroupLayout(xapiTxnPanel);
        xapiTxnPanel.setLayout(xapiTxnPanelLayout);
        xapiTxnPanelLayout.setHorizontalGroup(
            xapiTxnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 669, Short.MAX_VALUE)
            .addGap(0, 669, Short.MAX_VALUE)
            .addGroup(xapiTxnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(eiTxnTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE))
        );
        xapiTxnPanelLayout.setVerticalGroup(
            xapiTxnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 249, Short.MAX_VALUE)
            .addGap(0, 249, Short.MAX_VALUE)
            .addGroup(xapiTxnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(eiTxnTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE))
        );

        chargesDialog.setTitle("POS Charges");
        chargesDialog.setIconImage(getIconImage());
        chargesDialog.setModal(true);
        chargesDialog.setName("chargesDialog"); // NOI18N

        javax.swing.GroupLayout chargesDialogLayout = new javax.swing.GroupLayout(chargesDialog.getContentPane());
        chargesDialog.getContentPane().setLayout(chargesDialogLayout);
        chargesDialogLayout.setHorizontalGroup(
            chargesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        chargesDialogLayout.setVerticalGroup(
            chargesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        chargesDialog.setContentPane(new PHilae.TCPanel());
        chargesDialog.pack();
        chargesDialog.setResizable(false);
        chargesDialog.setLocationRelativeTo(this);

        chargesDialogMob.setTitle("MOB Charges");
        chargesDialogMob.setIconImage(getIconImage());
        chargesDialogMob.setModal(true);
        chargesDialogMob.setName("chargesDialogMob"); // NOI18N

        javax.swing.GroupLayout chargesDialogMobLayout = new javax.swing.GroupLayout(chargesDialogMob.getContentPane());
        chargesDialogMob.getContentPane().setLayout(chargesDialogMobLayout);
        chargesDialogMobLayout.setHorizontalGroup(
            chargesDialogMobLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        chargesDialogMobLayout.setVerticalGroup(
            chargesDialogMobLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        chargesDialogMob.setContentPane(new Mobile.TCPanelMOB());
        chargesDialogMob.pack();
        chargesDialogMob.setResizable(false);
        chargesDialogMob.setLocationRelativeTo(this);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("PHilae Unified Bridge ~ Neptune Software");
        setForeground(java.awt.Color.white);
        setIconImage(Toolkit.getDefaultToolkit().createImage(getClass().getResource("/images/icon.png")));
        setPreferredSize(new java.awt.Dimension(909, 700));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        mainSplitPane.setDividerLocation(145);
        mainSplitPane.setDividerSize(8);
        mainSplitPane.setMinimumSize(new java.awt.Dimension(145, 3));

        treePanel.setBackground(java.awt.Color.white);
        treePanel.setMinimumSize(new java.awt.Dimension(145, 0));
        treePanel.setName(""); // NOI18N
        treePanel.setPreferredSize(new java.awt.Dimension(145, 523));

        txnTree.setBorder(null);
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Transactions");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Approved");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Rejected");
        treeNode1.add(treeNode2);
        txnTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        txnTree.setAutoscrolls(true);
        txnTree.setCellRenderer(new PHilae.TRenderer());
        txnTree.setRootVisible(false);
        txnTree.setShowsRootHandles(true);
        txnTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                txnTreeValueChanged(evt);
            }
        });
        txnTreeScroller.setViewportView(txnTree);
        showTxnTree();

        posRadioBtn.setBackground(new java.awt.Color(255, 255, 255));
        posRadioBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        posRadioBtn.setForeground(new java.awt.Color(0, 153, 153));
        posRadioBtn.setSelected(true);
        posRadioBtn.setText("POS");
        posRadioBtn.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                posRadioBtnItemStateChanged(evt);
            }
        });
        posRadioBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                posRadioBtnActionPerformed(evt);
            }
        });

        mobRadioBtn.setBackground(new java.awt.Color(255, 255, 255));
        mobRadioBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        mobRadioBtn.setForeground(new java.awt.Color(0, 153, 153));
        mobRadioBtn.setText("Mobile");
        mobRadioBtn.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                mobRadioBtnItemStateChanged(evt);
            }
        });
        mobRadioBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mobRadioBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout treePanelLayout = new javax.swing.GroupLayout(treePanel);
        treePanel.setLayout(treePanelLayout);
        treePanelLayout.setHorizontalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(treeSeparator)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, treePanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txnTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(treePanelLayout.createSequentialGroup()
                        .addComponent(posRadioBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mobRadioBtn)))
                .addGap(1, 1, 1))
        );
        treePanelLayout.setVerticalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treePanelLayout.createSequentialGroup()
                .addGroup(treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(posRadioBtn)
                    .addComponent(mobRadioBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(treeSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txnTreeScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE))
        );

        treePanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {mobRadioBtn, posRadioBtn});

        mainSplitPane.setLeftComponent(treePanel);

        rightSplitPane.setDividerLocation(425);
        rightSplitPane.setDividerSize(8);
        rightSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        rightSplitPane.setResizeWeight(1.0);
        rightSplitPane.setToolTipText("");

        msgSplitPane.setDividerLocation(208);
        msgSplitPane.setDividerSize(8);
        msgSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        msgSplitPane.setResizeWeight(0.5);

        receivedMessagePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "Received Message", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11)), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2))); // NOI18N

        incomingTableScroller.setBorder(null);

        incomingTable.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));
        incomingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Field", "Content", "Description"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        incomingTableScroller.setViewportView(incomingTable);

        incomingTableScroller.setViewportView(new ISOMsgPanel(new ISOMsg()).createISOMsgTable());

        javax.swing.GroupLayout receivedMessagePanelLayout = new javax.swing.GroupLayout(receivedMessagePanel);
        receivedMessagePanel.setLayout(receivedMessagePanelLayout);
        receivedMessagePanelLayout.setHorizontalGroup(
            receivedMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 731, Short.MAX_VALUE)
            .addGroup(receivedMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(incomingTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE))
        );
        receivedMessagePanelLayout.setVerticalGroup(
            receivedMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 184, Short.MAX_VALUE)
            .addGroup(receivedMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(incomingTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))
        );

        msgSplitPane.setLeftComponent(receivedMessagePanel);

        responseMessagePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "Response Message", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11)), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2))); // NOI18N

        outgoingTableScroller.setBorder(null);

        outgoingTable.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));
        outgoingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Field", "Content", "Description"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        outgoingTableScroller.setViewportView(outgoingTable);

        outgoingTableScroller.setViewportView(new ISOMsgPanel(new ISOMsg()).createISOMsgTable());

        javax.swing.GroupLayout responseMessagePanelLayout = new javax.swing.GroupLayout(responseMessagePanel);
        responseMessagePanel.setLayout(responseMessagePanelLayout);
        responseMessagePanelLayout.setHorizontalGroup(
            responseMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outgoingTableScroller, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE)
        );
        responseMessagePanelLayout.setVerticalGroup(
            responseMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outgoingTableScroller, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
        );

        msgSplitPane.setRightComponent(responseMessagePanel);

        rightSplitPane.setLeftComponent(msgSplitPane);

        displayConsole.setEditable(false);
        displayConsole.setBackground(new java.awt.Color(204, 255, 204));
        displayScroller.setViewportView(displayConsole);

        rightSplitPane.setRightComponent(displayScroller);

        mainSplitPane.setRightComponent(rightSplitPane);

        leftToolBar.setRollover(true);

        shutdownButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit64.png"))); // NOI18N
        shutdownButton.setToolTipText("Shutdown");
        shutdownButton.setFocusable(false);
        shutdownButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        shutdownButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        shutdownButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                shutdownButtonActionPerformed(evt);
            }
        });
        leftToolBar.add(shutdownButton);

        aboutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/help64.png"))); // NOI18N
        aboutButton.setToolTipText("About");
        aboutButton.setFocusable(false);
        aboutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        aboutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        aboutButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aboutButtonActionPerformed(evt);
            }
        });
        leftToolBar.add(aboutButton);

        isometerToolBar.setBorder(null);
        isometerToolBar.setRollover(true);
        isometerToolBar.setToolTipText("");
        isometerToolBar.setOpaque(false);

        setIsoMeters();

        bridgeMenu.setMnemonic('P');
        bridgeMenu.setText("PHilae");

        shutdownMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_DOWN_MASK));
        shutdownMenuItem.setMnemonic('E');
        shutdownMenuItem.setText("Exit");
        shutdownMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                shutdownMenuItemActionPerformed(evt);
            }
        });
        bridgeMenu.add(shutdownMenuItem);

        menuBar.add(bridgeMenu);

        agencyMenu.setMnemonic('O');
        agencyMenu.setText("Pos");

        agencySettingsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        agencySettingsMenuItem.setMnemonic('S');
        agencySettingsMenuItem.setText("POS Settings");
        agencySettingsMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agencySettingsMenuItemActionPerformed(evt);
            }
        });
        agencyMenu.add(agencySettingsMenuItem);
        agencyMenu.add(jSeparator1);

        chargesMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        chargesMenuItem.setMnemonic('C');
        chargesMenuItem.setText("POS Charges");
        chargesMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chargesMenuItemActionPerformed(evt);
            }
        });
        agencyMenu.add(chargesMenuItem);
        agencyMenu.add(jSeparator4);

        eiTerminalMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        eiTerminalMenuItem.setMnemonic('T');
        eiTerminalMenuItem.setText("POS Terminals");
        eiTerminalMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                eiTerminalMenuItemActionPerformed(evt);
            }
        });
        agencyMenu.add(eiTerminalMenuItem);
        agencyMenu.add(jSeparator2);

        extractDataFilesMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        extractDataFilesMenuItem.setMnemonic('F');
        extractDataFilesMenuItem.setText("Extract Files");
        extractDataFilesMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                extractDataFilesMenuItemActionPerformed(evt);
            }
        });
        agencyMenu.add(extractDataFilesMenuItem);
        agencyMenu.add(jSeparator3);

        procCodeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        procCodeMenuItem.setMnemonic('F');
        procCodeMenuItem.setText("Proc Codes");
        procCodeMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                procCodeMenuItemActionPerformed(evt);
            }
        });
        agencyMenu.add(procCodeMenuItem);
        agencyMenu.add(jSeparator5);

        suspendServiceCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, java.awt.event.InputEvent.ALT_DOWN_MASK));
        suspendServiceCheckBoxMenuItem.setMnemonic('U');
        suspendServiceCheckBoxMenuItem.setText("Suspend Service");
        suspendServiceCheckBoxMenuItem.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                suspendServiceCheckBoxMenuItemItemStateChanged(evt);
            }
        });
        agencyMenu.add(suspendServiceCheckBoxMenuItem);

        suspendServiceCheckBoxMenuItem.setSelected("Y".equalsIgnoreCase(PHController.SuspendPOS));
        suspendServiceCheckBoxMenuItem.setText("Y".equalsIgnoreCase(PHController.SuspendPOS) ? "Resume Service" : "Suspend Service");

        menuBar.add(agencyMenu);

        agencyMenu1.setMnemonic('O');
        agencyMenu1.setText("Mobile");

        agencySettingsMenuItemMob.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        agencySettingsMenuItemMob.setMnemonic('S');
        agencySettingsMenuItemMob.setText("Mobile Settings");
        agencySettingsMenuItemMob.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agencySettingsMenuItemMobActionPerformed(evt);
            }
        });
        agencyMenu1.add(agencySettingsMenuItemMob);
        agencyMenu1.add(jSeparator6);

        chargesMenuItemMob.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        chargesMenuItemMob.setMnemonic('C');
        chargesMenuItemMob.setText("Mobile Charges");
        chargesMenuItemMob.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chargesMenuItemMobActionPerformed(evt);
            }
        });
        agencyMenu1.add(chargesMenuItemMob);
        agencyMenu1.add(jSeparator7);

        eiTerminalMenuItemMob.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        eiTerminalMenuItemMob.setMnemonic('T');
        eiTerminalMenuItemMob.setText("Proc. Codes Config");
        eiTerminalMenuItemMob.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                eiTerminalMenuItemMobActionPerformed(evt);
            }
        });
        agencyMenu1.add(eiTerminalMenuItemMob);
        agencyMenu1.add(jSeparator8);

        extractDataFilesMenuItemMob.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        extractDataFilesMenuItemMob.setMnemonic('F');
        extractDataFilesMenuItemMob.setText("Biller Codes Config");
        extractDataFilesMenuItemMob.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                extractDataFilesMenuItemMobActionPerformed(evt);
            }
        });
        agencyMenu1.add(extractDataFilesMenuItemMob);
        agencyMenu1.add(jSeparator9);

        suspendServiceCheckBoxMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, java.awt.event.InputEvent.ALT_DOWN_MASK));
        suspendServiceCheckBoxMenuItem1.setMnemonic('U');
        suspendServiceCheckBoxMenuItem1.setText("Suspend Service");
        suspendServiceCheckBoxMenuItem1.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                suspendServiceCheckBoxMenuItem1ItemStateChanged(evt);
            }
        });
        agencyMenu1.add(suspendServiceCheckBoxMenuItem1);

        suspendServiceCheckBoxMenuItem.setSelected("Y".equalsIgnoreCase(PHController.SuspendMOB));
        suspendServiceCheckBoxMenuItem.setText("Y".equalsIgnoreCase(PHController.SuspendMOB) ? "Resume Service" : "Suspend Service");

        menuBar.add(agencyMenu1);

        smsMenu.setText("Sms");
        smsMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                smsMenuActionPerformed(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Sms Config");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem1ActionPerformed(evt);
            }
        });
        smsMenu.add(jMenuItem1);

        menuBar.add(smsMenu);

        aboutMenu.setMnemonic('A');
        aboutMenu.setText("About");
        aboutMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aboutMenuActionPerformed(evt);
            }
        });

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, java.awt.event.InputEvent.ALT_DOWN_MASK));
        aboutMenuItem.setText("About PHilae");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aboutMenuItemActionPerformed(evt);
            }
        });
        aboutMenu.add(aboutMenuItem);

        menuBar.add(aboutMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(leftToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(isometerToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(isometerToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(leftToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE))
        );

        updateDisplay();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void shutdownButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shutdownButtonActionPerformed
    {//GEN-HEADEREND:event_shutdownButtonActionPerformed
        // TODO add your handling code here:
//        if (eiLogin.isUserAdmin("PHilae Shutdown"))
//        {
        PHMain.shutdown();
//        }
    }//GEN-LAST:event_shutdownButtonActionPerformed

    private void txnTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_txnTreeValueChanged
    {//GEN-HEADEREND:event_txnTreeValueChanged
        // TODO add your handling code here:
        try
        {
            updateDisplay();
        }
        catch (Exception ex)
        {
            ex = null;
        }
    }//GEN-LAST:event_txnTreeValueChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        // TODO add your handling code here:
        SwingUtilities.invokeLater(shutdownButton::doClick);
    }//GEN-LAST:event_formWindowClosing

    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutButtonActionPerformed
    {//GEN-HEADEREND:event_aboutButtonActionPerformed
        // TODO add your handling code here:
        showAboutInfo();
    }//GEN-LAST:event_aboutButtonActionPerformed

    private void shutdownMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shutdownMenuItemActionPerformed
    {//GEN-HEADEREND:event_shutdownMenuItemActionPerformed
        // TODO add your handling code here:
        SwingUtilities.invokeLater(shutdownButton::doClick);
    }//GEN-LAST:event_shutdownMenuItemActionPerformed

    private void aboutMenuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutMenuActionPerformed
    {//GEN-HEADEREND:event_aboutMenuActionPerformed
        // TODO add your handling code here:
        SwingUtilities.invokeLater(aboutButton::doClick);
    }//GEN-LAST:event_aboutMenuActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutMenuItemActionPerformed
    {//GEN-HEADEREND:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        SwingUtilities.invokeLater(aboutButton::doClick);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    public void setIsoMeters()
    {
        isometerToolBar.removeAll();
        isometerToolBar.add(getPosBridgeIsoMeter());
        isometerToolBar.addSeparator();
        isometerToolBar.add(getMobBridgeIsoMeter());
        SwingUtilities.invokeLater(()
                ->
                {
                    try
                    {
                        Thread.sleep(50);
                        isometerToolBar.updateUI();
                    }
                    catch (Exception ex)
                    {
                        ex = null;
                    }
                });
    }

    private void suspendServiceCheckBoxMenuItemItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_suspendServiceCheckBoxMenuItemItemStateChanged
    {//GEN-HEADEREND:event_suspendServiceCheckBoxMenuItemItemStateChanged
        // TODO add your handling code here:
        if (eiLogin.isUserAdmin("Suspend Bridge"))
        {
            if (suspendServiceCheckBoxMenuItem.isSelected() != "Y".equalsIgnoreCase(PHController.SuspendPOS))
            {
                PHController.SuspendPOS = suspendServiceCheckBoxMenuItem.isSelected() ? "Y" : "N";
                PHMain.restartBridge();
            }
            suspendServiceCheckBoxMenuItem.setText("Y".equalsIgnoreCase(PHController.SuspendPOS) ? "Resume Service" : "Suspend Service");
        }
    }//GEN-LAST:event_suspendServiceCheckBoxMenuItemItemStateChanged

    private void agencySettingsMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agencySettingsMenuItemActionPerformed
    {//GEN-HEADEREND:event_agencySettingsMenuItemActionPerformed
        // TODO add your handling code here:
        if (eiLogin.isUserAdmin(capitalize(PHController.posModule) + " Settings"))
        {
            settingsPanel.showSettingsDialog();
        }
    }//GEN-LAST:event_agencySettingsMenuItemActionPerformed

    private void chargesMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chargesMenuItemActionPerformed
    {//GEN-HEADEREND:event_chargesMenuItemActionPerformed
        // TODO add your handling code here:
        if (eiLogin.isUserAdmin(capitalize(PHController.posModule) + " Charges"))
        {
            showPosChargesDialog();
        }
    }//GEN-LAST:event_chargesMenuItemActionPerformed

    private void extractDataFilesMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_extractDataFilesMenuItemActionPerformed
    {//GEN-HEADEREND:event_extractDataFilesMenuItemActionPerformed
        // TODO add your handling code here:
        if (eiLogin.isUserAdmin(capitalize(PHController.posModule) + " Data Files"))
        {
            fLWorker.showFilesDialog();
        }
    }//GEN-LAST:event_extractDataFilesMenuItemActionPerformed

    private void eiTerminalMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_eiTerminalMenuItemActionPerformed
    {//GEN-HEADEREND:event_eiTerminalMenuItemActionPerformed
        // TODO add your handling code here:
        if (eiLogin.isUserAdmin(capitalize(PHController.posModule) + " Terminals"))
        {
            tMPanel.showTerminalsDialog();
        }
    }//GEN-LAST:event_eiTerminalMenuItemActionPerformed

    private void procCodeMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_procCodeMenuItemActionPerformed
    {//GEN-HEADEREND:event_procCodeMenuItemActionPerformed
        // TODO add your handling code here:
        if (eiLogin.isUserAdmin(capitalize(PHController.posModule) + " Custom Processing Codes"))
        {
            procCodePanel.showProcCodeDialog();
        }
    }//GEN-LAST:event_procCodeMenuItemActionPerformed

    private void posRadioBtnItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_posRadioBtnItemStateChanged
    {//GEN-HEADEREND:event_posRadioBtnItemStateChanged
        // TODO add your handling code here:

        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            showPosTxnTree();
        }
    }//GEN-LAST:event_posRadioBtnItemStateChanged

    private void mobRadioBtnItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_mobRadioBtnItemStateChanged
    {//GEN-HEADEREND:event_mobRadioBtnItemStateChanged
        // TODO add your handling code here: mobRadioBtn.setSelected(false);

        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            showMobTxnTree();
        }
    }//GEN-LAST:event_mobRadioBtnItemStateChanged

    private void posRadioBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_posRadioBtnActionPerformed
    {//GEN-HEADEREND:event_posRadioBtnActionPerformed
        // TODO add your handling code here:
        if (posRadioBtn.isSelected())
        {
            posRadioBtn.setSelected(true);
            mobRadioBtn.setSelected(false);
        }
    }//GEN-LAST:event_posRadioBtnActionPerformed

    private void mobRadioBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mobRadioBtnActionPerformed
    {//GEN-HEADEREND:event_mobRadioBtnActionPerformed
        // TODO add your handling code here:
        if (mobRadioBtn.isSelected())
        {
            mobRadioBtn.setSelected(true);
            posRadioBtn.setSelected(false);
        }
    }//GEN-LAST:event_mobRadioBtnActionPerformed

    private void agencySettingsMenuItemMobActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agencySettingsMenuItemMobActionPerformed
    {//GEN-HEADEREND:event_agencySettingsMenuItemMobActionPerformed
        // TODO add your handling code here:
        if (eiLogin.isUserAdmin(capitalize(PHController.MobModule) + " Settings"))
        {
            settingsPanelMob.showSettingsDialog();
        }
    }//GEN-LAST:event_agencySettingsMenuItemMobActionPerformed

    private void chargesMenuItemMobActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chargesMenuItemMobActionPerformed
    {//GEN-HEADEREND:event_chargesMenuItemMobActionPerformed
        // TODO add your handling code here:
        if (eiLogin.isUserAdmin(capitalize(PHController.MobModule) + " Charges"))
        {
            showMobChargesDialog();
        }
    }//GEN-LAST:event_chargesMenuItemMobActionPerformed

    private void eiTerminalMenuItemMobActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_eiTerminalMenuItemMobActionPerformed
    {//GEN-HEADEREND:event_eiTerminalMenuItemMobActionPerformed
        // TODO add your handling code here:
        if (eiLogin.isUserAdmin(capitalize(PHController.MobModule) + " Custom Processing Codes"))
        {
            procCodePanelMob.showProcCodeDialog();
        }
    }//GEN-LAST:event_eiTerminalMenuItemMobActionPerformed

    private void extractDataFilesMenuItemMobActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_extractDataFilesMenuItemMobActionPerformed
    {//GEN-HEADEREND:event_extractDataFilesMenuItemMobActionPerformed
        // TODO add your handling code here:
        if (eiLogin.isUserAdmin(capitalize(PHController.MobModule) + " Biller Codes"))
        {
            // fLWorker.showFilesDialog();
            eIBillerPanelMOB.showBillerCodeDialog();
        }
    }//GEN-LAST:event_extractDataFilesMenuItemMobActionPerformed

    private void suspendServiceCheckBoxMenuItem1ItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_suspendServiceCheckBoxMenuItem1ItemStateChanged
    {//GEN-HEADEREND:event_suspendServiceCheckBoxMenuItem1ItemStateChanged
        // TODO add your handling code here:
        if (eiLogin.isUserAdmin("Suspend Bridge"))
        {
            if (suspendServiceCheckBoxMenuItem.isSelected() != "Y".equalsIgnoreCase(PHController.SuspendMOB))
            {
                PHController.SuspendMOB = suspendServiceCheckBoxMenuItem.isSelected() ? "Y" : "N";
                PHMain.restartBridge();
            }
            suspendServiceCheckBoxMenuItem.setText("Y".equalsIgnoreCase(PHController.SuspendMOB) ? "Resume Service" : "Suspend Service");
        }
    }//GEN-LAST:event_suspendServiceCheckBoxMenuItem1ItemStateChanged

    private void smsMenuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_smsMenuActionPerformed
    {//GEN-HEADEREND:event_smsMenuActionPerformed
        
    }//GEN-LAST:event_smsMenuActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem1ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem1ActionPerformed
        if (eiLogin.isUserAdmin(capitalize(PHController.MobModule) + " SMS Alerts "))
        {
            sMSConfigPanel.showSmsTemplateDialog();
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    public void showPosChargesDialog()
    {
        // TODO add your handling code here:
        chargesDialog.setIconImage(getIconImage());
        SwingUtilities.invokeLater(()
                ->
                {
                    ((TCPanel) chargesDialog.getContentPane()).displayCharge();
                    chargesDialog.setVisible(true);
                });
    }

    public void showMobChargesDialog()
    {
        // TODO add your handling code here:
        chargesDialogMob.setIconImage(getIconImage());
        SwingUtilities.invokeLater(()
                ->
                {
                    ((TCPanelMOB) chargesDialogMob.getContentPane()).displayCharge();
                    chargesDialogMob.setVisible(true);
                });
    }

    public void hidePosChargesDialog()
    {
        // TODO add your handling code here:
        SwingUtilities.invokeLater(()
                ->
                {
                    chargesDialog.setVisible(false);
                });
    }

    public void hideMobChargesDialog()
    {
        // TODO add your handling code here:
        SwingUtilities.invokeLater(()
                ->
                {
                    chargesDialogMob.setVisible(false);
                });
    }

    public String capitalize(String text)
    {
        if (text != null)
        {
            try
            {
                StringBuilder builder = new StringBuilder();
                for (String word : text.toLowerCase().split("\\s"))
                {
                    builder.append(word.substring(0, 1).toUpperCase()).append(word.substring(1).toLowerCase()).append(" ");
                }
                return builder.toString();
            }
            catch (Exception ex)
            {
                return text;
            }
        }
        return text;
    }

    public void setPosBridgeIsoMeter(ISOMeter bridgeMeter)
    {
        int i = isometerToolBar.getComponentIndex(getPosBridgeIsoMeter());
        isometerToolBar.remove(getPosBridgeIsoMeter());
        isometerToolBar.add(bridgeMeter, i);
        posBridgeIsoMeter = bridgeMeter;
        isometerToolBar.validate();
    }

    public void setMobBridgeIsoMeter(ISOMeter bridgeMeter)
    {
        int i = isometerToolBar.getComponentIndex(getMobBridgeIsoMeter());
        isometerToolBar.remove(getMobBridgeIsoMeter());
        isometerToolBar.add(bridgeMeter, i);
        mobBridgeIsoMeter = bridgeMeter;
        isometerToolBar.validate();
    }

    private ISOMsg getPosTxnMessage(String txnRef, boolean isIncoming, boolean isReversal)
    {
        int tranCount = posTxnLog.getSize();
        for (int i = 0;i < tranCount;i++)
        {
            ISOMsg msg = (ISOMsg) posTxnLog.getElementAt(i);
            String MTI = msg.getMTI();

            if (msg.getTxnReference().equals(txnRef) && (msg.isIncoming() == isIncoming) && ((MTI.equalsIgnoreCase("9420") || MTI.equalsIgnoreCase("9421") || MTI.equalsIgnoreCase("0420") || MTI.equalsIgnoreCase("0421")) == isReversal))
            {
                return msg;
            }
        }

        return null;
    }

    private ISOMsg getMobTxnMessage(String txnRef, boolean isIncoming, boolean isReversal)
    {
        int tranCount = mobTxnLog.getSize();
        for (int i = 0;i < tranCount;i++)
        {
            ISOMsg msg = (ISOMsg) mobTxnLog.getElementAt(i);
            String MTI = msg.getMTI();

            if (msg.getTxnReference().equals(txnRef) && (msg.isIncoming() == isIncoming) && ((MTI.equalsIgnoreCase("9420") || MTI.equalsIgnoreCase("9421") || MTI.equalsIgnoreCase("0420") || MTI.equalsIgnoreCase("0421")) == isReversal))
            {
                return msg;
            }
        }

        return null;
    }

    public void insertPosTxnToTree(ISOMsg txnMsg)
    {
        try
        {
            int count;
            EITxn eiTxn;
            DefaultMutableTreeNode txnNode;
            DefaultMutableTreeNode txnRootNode = ((DefaultMutableTreeNode) txnTree.getModel().getRoot());
            DefaultMutableTreeNode approvedNode = (DefaultMutableTreeNode) txnRootNode.getFirstChild();
            DefaultMutableTreeNode rejectedNode = (DefaultMutableTreeNode) txnRootNode.getLastChild();

            if (txnMsg.getResponseCode() == null ? false : EICodes.ISO_APPROVED.equals(txnMsg.getResponseCode()))
            {
                count = approvedNode.getChildCount();
                for (int i = 0;i < count;i++)
                {
                    txnNode = (DefaultMutableTreeNode) approvedNode.getChildAt(i);
                    eiTxn = (EITxn) txnNode.getUserObject();

                    if (eiTxn.getProcessingCode().equals(txnMsg.getProcessingCode()))
                    {
                        txnNode.insert(new DefaultMutableTreeNode(txnMsg), 0);
                        break;
                    }
                }
            }
            else
            {
                count = rejectedNode.getChildCount();
                for (int i = 0;i < count;i++)
                {
                    txnNode = (DefaultMutableTreeNode) rejectedNode.getChildAt(i);
                    eiTxn = (EITxn) txnNode.getUserObject();

                    if (eiTxn.getProcessingCode().equals(txnMsg.getProcessingCode()))
                    {
                        txnNode.insert(new DefaultMutableTreeNode(txnMsg), 0);
                        break;
                    }
                }
            }

            txnTreeScroller.getHorizontalScrollBar().setValue(0);
            updateTreeUI();
        }
        catch (Exception ex)
        {
            updateDisplay();
        }
    }

    public void insertMobTxnToTree(ISOMsg txnMsg)
    {
        try
        {
            int count;
            EITxnMOB eiTxn;
            DefaultMutableTreeNode txnNode;
            DefaultMutableTreeNode txnRootNode = ((DefaultMutableTreeNode) txnTree.getModel().getRoot());
            DefaultMutableTreeNode approvedNode = (DefaultMutableTreeNode) txnRootNode.getFirstChild();
            DefaultMutableTreeNode rejectedNode = (DefaultMutableTreeNode) txnRootNode.getLastChild();

            if (txnMsg.getResponseCode() == null ? false : EICodes.ISO_APPROVED.equals(txnMsg.getResponseCode()))
            {
                count = approvedNode.getChildCount();
                for (int i = 0;i < count;i++)
                {
                    txnNode = (DefaultMutableTreeNode) approvedNode.getChildAt(i);
                    eiTxn = (EITxnMOB) txnNode.getUserObject();

                    if (eiTxn.getProcessingCode().equals(txnMsg.getProcessingCode()))
                    {
                        txnNode.insert(new DefaultMutableTreeNode(txnMsg), 0);
                        break;
                    }
                }
            }
            else
            {
                count = rejectedNode.getChildCount();
                for (int i = 0;i < count;i++)
                {
                    txnNode = (DefaultMutableTreeNode) rejectedNode.getChildAt(i);
                    eiTxn = (EITxnMOB) txnNode.getUserObject();

                    if (eiTxn.getProcessingCode().equals(txnMsg.getProcessingCode()))
                    {
                        txnNode.insert(new DefaultMutableTreeNode(txnMsg), 0);
                        break;
                    }
                }
            }

            txnTreeScroller.getHorizontalScrollBar().setValue(0);
            updateTreeUI();
        }
        catch (Exception ex)
        {
            updateDisplay();
        }
    }

    private void removePosTxnFromLog(ISOMsg msg)
    {
        try
        {
            ListModel log = (DefaultListModel) PHMain.posBridgeIsoMeter.getLogList() == null ? PHMain.loadPosBridgeTxnLog() : (DefaultListModel) PHMain.posBridgeIsoMeter.getLogList();
            ((DefaultListModel) log).removeElement(msg);
        }
        catch (Exception e)
        {
            e = null;
        }
    }

    private void removeMobTxnFromLog(ISOMsg msg)
    {
        try
        {
            ListModel log = (DefaultListModel) PHMain.mobBridgeIsoMeter.getLogList() == null ? PHMain.loadMobBridgeTxnLog() : (DefaultListModel) PHMain.mobBridgeIsoMeter.getLogList();
            ((DefaultListModel) log).removeElement(msg);
        }
        catch (Exception e)
        {
            e = null;
        }
    }

    public void showPosTxnTree()
    {
        try
        {
            if (PHMain.posBridgeIsoMeter != null)
            {
                if (!"Y".equalsIgnoreCase(PHController.SuspendPOS))
                {
                    posTxnLog = PHMain.posBridgeIsoMeter.getLogList();
                }
                else
                {
                    posTxnLog = PHMain.loadPosBridgeTxnLog();
                }
            }
            if (posTxnLog.getSize() <= 0)
            {
                posTxnLog = PHMain.loadPosBridgeTxnLog();
            }

            posTxnList.clear();
            DefaultMutableTreeNode txnRootNode = ((DefaultMutableTreeNode) txnTree.getModel().getRoot());

            DefaultMutableTreeNode approvedNode = (DefaultMutableTreeNode) txnRootNode.getFirstChild();
            DefaultMutableTreeNode rejectedNode = (DefaultMutableTreeNode) txnRootNode.getLastChild();

            approvedNode.removeAllChildren();
            rejectedNode.removeAllChildren();

            posTxnList.add(new EITxn("00", "POS Purchase"));
            posTxnList.add(new EITxn("01", "Cash Withdrawal"));

            posTxnList.add(new EITxn("03", "Off-Us Cash Withdrawal"));

            posTxnList.add(new EITxn("21", "Cash Deposit"));
            posTxnList.add(new EITxn("31", "Balance Inquiry"));

            posTxnList.add(new EITxn("38", "Ministatement Inquiry"));
            posTxnList.add(new EITxn("40", "Funds Transfer"));

            posTxnList.add(new EITxn("91", "Check Book Request"));

            boolean isFirstTxnFound = false;
            for (EITxn eITxn : posTxnList)
            {
                DefaultMutableTreeNode[] nodes = getPosTxnNodes(eITxn);
                approvedNode.add(nodes[0]);
                rejectedNode.add(nodes[1]);

                if (!isFirstTxnFound)
                {
                    txnTree.scrollPathToVisible(new TreePath(((DefaultMutableTreeNode) approvedNode.getFirstChild()).getPath()));
                    txnTree.scrollPathToVisible(new TreePath(((DefaultMutableTreeNode) rejectedNode.getFirstChild()).getPath()));
                }

                if (!nodes[0].isLeaf())
                {
                    txnTree.scrollPathToVisible(new TreePath(((DefaultMutableTreeNode) nodes[0].getFirstChild()).getPath()));
                    if (!isFirstTxnFound)
                    {
                        txnTree.setSelectionPath(new TreePath(((DefaultMutableTreeNode) nodes[0].getFirstChild()).getPath()));
                        isFirstTxnFound = true;
                    }
                }
                if (!nodes[1].isLeaf())
                {
                    txnTree.scrollPathToVisible(new TreePath(((DefaultMutableTreeNode) nodes[1].getFirstChild()).getPath()));
                    if (!isFirstTxnFound)
                    {
                        txnTree.setSelectionPath(new TreePath(((DefaultMutableTreeNode) nodes[1].getFirstChild()).getPath()));
                        isFirstTxnFound = true;
                    }
                }
            }

            txnTreeScroller.getHorizontalScrollBar().setValue(0);
            txnTreeScroller.getVerticalScrollBar().setValue(0);

            txnTreeScroller.setBorder(null);
            updateTreeUI();
        }
        catch (Exception ex)
        {
            if (PHMain.posBridgeIsoMeter != null && !"Y".equalsIgnoreCase(PHController.SuspendPOS))
            {
                PHMain.posBridgeIsoMeter.setLogList(new DefaultListModel());
            }
        }
    }

    public void showMobTxnTree()
    {
        try
        {
            if (PHMain.mobBridgeIsoMeter != null)
            {
                if (!"Y".equalsIgnoreCase(PHController.SuspendMOB))
                {
                    mobTxnLog = PHMain.mobBridgeIsoMeter.getLogList();
                }
                else
                {
                    mobTxnLog = PHMain.loadMobBridgeTxnLog();
                }
            }
            if (mobTxnLog.getSize() <= 0)
            {
                mobTxnLog = PHMain.loadMobBridgeTxnLog();
            }

            mobTxnList.clear();
            DefaultMutableTreeNode txnRootNode = ((DefaultMutableTreeNode) txnTree.getModel().getRoot());

            DefaultMutableTreeNode approvedNode = (DefaultMutableTreeNode) txnRootNode.getFirstChild();
            DefaultMutableTreeNode rejectedNode = (DefaultMutableTreeNode) txnRootNode.getLastChild();

            approvedNode.removeAllChildren();
            rejectedNode.removeAllChildren();

            mobTxnList.add(new EITxnMOB("03", "Mobile Payments"));
            mobTxnList.add(new EITxnMOB("31", "Balance Inquiry"));

            mobTxnList.add(new EITxnMOB("38", "Ministatement Inquiry"));
            mobTxnList.add(new EITxnMOB("40", "Funds Transfer"));

            mobTxnList.add(new EITxnMOB("91", "Check Book Request"));

            boolean isFirstTxnFound = false;
            for (EITxnMOB eITxn : mobTxnList)
            {
                DefaultMutableTreeNode[] nodes = getMobTxnNodes(eITxn);
                approvedNode.add(nodes[0]);
                rejectedNode.add(nodes[1]);

                if (!isFirstTxnFound)
                {
                    txnTree.scrollPathToVisible(new TreePath(((DefaultMutableTreeNode) approvedNode.getFirstChild()).getPath()));
                    txnTree.scrollPathToVisible(new TreePath(((DefaultMutableTreeNode) rejectedNode.getFirstChild()).getPath()));
                }

                if (!nodes[0].isLeaf())
                {
                    txnTree.scrollPathToVisible(new TreePath(((DefaultMutableTreeNode) nodes[0].getFirstChild()).getPath()));
                    if (!isFirstTxnFound)
                    {
                        txnTree.setSelectionPath(new TreePath(((DefaultMutableTreeNode) nodes[0].getFirstChild()).getPath()));
                        isFirstTxnFound = true;
                    }
                }
                if (!nodes[1].isLeaf())
                {
                    txnTree.scrollPathToVisible(new TreePath(((DefaultMutableTreeNode) nodes[1].getFirstChild()).getPath()));
                    if (!isFirstTxnFound)
                    {
                        txnTree.setSelectionPath(new TreePath(((DefaultMutableTreeNode) nodes[1].getFirstChild()).getPath()));
                        isFirstTxnFound = true;
                    }
                }
            }

            txnTreeScroller.getHorizontalScrollBar().setValue(0);
            txnTreeScroller.getVerticalScrollBar().setValue(0);

            txnTreeScroller.setBorder(null);
            updateTreeUI();
        }
        catch (Exception ex)
        {
            if (PHMain.mobBridgeIsoMeter != null && !"Y".equalsIgnoreCase(PHController.SuspendMOB))
            {
                PHMain.mobBridgeIsoMeter.setLogList(new DefaultListModel());
            }
        }
    }

    public void showTxnTree()
    {
        if (posRadioBtn.isSelected())
        {
            showPosTxnTree();
        }
        else if (mobRadioBtn.isSelected())
        {
            showMobTxnTree();
        }

    }

    public String getPosTxnDescription(String procCode)
    {
        for (EITxn eITxn : posTxnList)
        {
            if (eITxn.getProcessingCode().equals(procCode))
            {
                return eITxn.getTxnDescription();
            }
        }
        return "";
    }

    public String getMobTxnDescription(String procCode)
    {
        for (EITxnMOB eITxn : mobTxnList)
        {
            if (eITxn.getProcessingCode().equals(procCode))
            {
                return eITxn.getTxnDescription();
            }
        }
        return "";
    }

    private DefaultMutableTreeNode[] getPosTxnNodes(EITxn eiTxn)
    {
        DefaultMutableTreeNode approvedTxnNode = new DefaultMutableTreeNode(eiTxn.getClone(true));
        DefaultMutableTreeNode rejectedTxnNode = new DefaultMutableTreeNode(eiTxn.getClone(false));

        if (posTxnLog != null)
        {
            int tranCount = posTxnLog.getSize();
            String procCode = ((EITxn) approvedTxnNode.getUserObject()).getProcessingCode();

            for (int i = 0;i < tranCount;i++)
            {
                ISOMsg txnMsg = (ISOMsg) posTxnLog.getElementAt(i);
                if ((txnMsg.getProcessingCode() == null ? procCode == null : txnMsg.getProcessingCode().equals(procCode)) && txnMsg.isOutgoing())
                {
                    if (txnMsg.getResponseCode() == null ? false : EICodes.ISO_APPROVED.equals(txnMsg.getResponseCode()))
                    {
                        approvedTxnNode.insert(new DefaultMutableTreeNode(txnMsg), 0);
                    }
                    else
                    {
                        rejectedTxnNode.insert(new DefaultMutableTreeNode(txnMsg), 0);
                    }
                }
            }
        }

        return new DefaultMutableTreeNode[]
        {
            approvedTxnNode, rejectedTxnNode
        };
    }

    private DefaultMutableTreeNode[] getMobTxnNodes(EITxnMOB eiTxn)
    {
        DefaultMutableTreeNode approvedTxnNode = new DefaultMutableTreeNode(eiTxn.getClone(true));
        DefaultMutableTreeNode rejectedTxnNode = new DefaultMutableTreeNode(eiTxn.getClone(false));

        if (mobTxnLog != null)
        {
            int tranCount = mobTxnLog.getSize();
            String procCode = ((EITxnMOB) approvedTxnNode.getUserObject()).getProcessingCode();

            for (int i = 0;i < tranCount;i++)
            {
                ISOMsg txnMsg = (ISOMsg) mobTxnLog.getElementAt(i);
                if ((txnMsg.getProcessingCode() == null ? procCode == null : txnMsg.getProcessingCode().equals(procCode)) && txnMsg.isOutgoing())
                {
                    if (txnMsg.getResponseCode() == null ? false : EICodes.ISO_APPROVED.equals(txnMsg.getResponseCode()))
                    {
                        approvedTxnNode.insert(new DefaultMutableTreeNode(txnMsg), 0);
                    }
                    else
                    {
                        rejectedTxnNode.insert(new DefaultMutableTreeNode(txnMsg), 0);
                    }
                }
            }
        }

        return new DefaultMutableTreeNode[]
        {
            approvedTxnNode, rejectedTxnNode
        };
    }

    public void updateDisplay()
    {
        try
        {
            if (posRadioBtn.isSelected())
            {
                if (!"Y".equalsIgnoreCase(PHController.SuspendPOS))
                {
                    posTxnLog = PHMain.posBridgeIsoMeter.getLogList();
                }
                else
                {
                    posTxnLog = PHMain.loadPosBridgeTxnLog();
                }
            }
            if (mobRadioBtn.isSelected())
            {
                if (!"Y".equalsIgnoreCase(PHController.SuspendMOB))
                {
                    mobTxnLog = PHMain.mobBridgeIsoMeter.getLogList();
                }
                else
                {
                    mobTxnLog = PHMain.loadMobBridgeTxnLog();
                }
            }
        }
        catch (Exception ex)
        {
            if (posRadioBtn.isSelected())
            {
                posTxnLog = new DefaultListModel();
            }
            else
            {
                mobTxnLog = new DefaultListModel();
            }

        }
        try
        {
            if (posRadioBtn.isSelected() && !mobRadioBtn.isSelected())
            {
                DefaultMutableTreeNode selectedTxnNode = (DefaultMutableTreeNode) txnTree.getLastSelectedPathComponent();
                if (selectedTxnNode != null)
                {
                    Object selectedObject = selectedTxnNode.getUserObject();
                    if (selectedObject instanceof ISOMsg)
                    {
                        int splitLoc = rightSplitPane.getDividerLocation();
                        rightSplitPane.setLeftComponent(msgSplitPane);
                        rightSplitPane.setDividerLocation(splitLoc);

                        DefaultMutableTreeNode xapiTxnNode = (DefaultMutableTreeNode) selectedTxnNode.getParent();
                        EITxn eiTxn = (EITxn) xapiTxnNode.getUserObject();

                        receivedMessagePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, eiTxn.getTxnDescription() + " Request", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11)), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));
                        responseMessagePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, eiTxn.getTxnDescription() + " Response", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11)), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));

                        ISOMsg selMsg = ((ISOMsg) selectedObject);
                        String MTI = selMsg.getMTI();
                        ISOMsg incMsg = getPosTxnMessage(selMsg.getTxnReference(), true, (MTI.equalsIgnoreCase("9430") || MTI.equalsIgnoreCase("9431") || MTI.equalsIgnoreCase("0430") || MTI.equalsIgnoreCase("0431")));
                        if (incMsg == null)
                        {
                            SwingUtilities.invokeLater(()
                                    ->
                                    {
                                        removePosTxnFromLog(selMsg);
                                        txnTree.removeSelectionPath(new TreePath(selectedTxnNode.getPath()));
                                    });
                            return;
                        }
                        incomingTableScroller.setViewportView(new ISOMsgPanel(incMsg).createISOMsgTable());
                        outgoingTableScroller.setViewportView(new ISOMsgPanel((ISOMsg) selectedObject).createISOMsgTable());
                    }
                    else if (selectedObject instanceof EITxn)
                    {
                        EITxn eiTxn = (EITxn) selectedObject;
                        int splitLoc = rightSplitPane.getDividerLocation();

                        rightSplitPane.setLeftComponent(xapiTxnPanel);
                        rightSplitPane.setDividerLocation(splitLoc);

                        if (eiTxn.isApproved())
                        {
                            xapiTxnPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Approved " + eiTxn.getTxnDescription()), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));
                        }
                        else
                        {
                            xapiTxnPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Rejected " + eiTxn.getTxnDescription()), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));
                        }

                        eiTxnTableScroller.setViewportView(createPosMessagesTable(eiTxn));
                    }
                    txnTree.setBorder(null);
                    txnTreeScroller.setBorder(null);
                }
            }
            else if (mobRadioBtn.isSelected() && !posRadioBtn.isSelected())
            {
                DefaultMutableTreeNode selectedTxnNode = (DefaultMutableTreeNode) txnTree.getLastSelectedPathComponent();
                if (selectedTxnNode != null)
                {
                    Object selectedObject = selectedTxnNode.getUserObject();
                    if (selectedObject instanceof ISOMsg)
                    {
                        int splitLoc = rightSplitPane.getDividerLocation();
                        rightSplitPane.setLeftComponent(msgSplitPane);
                        rightSplitPane.setDividerLocation(splitLoc);

                        DefaultMutableTreeNode xapiTxnNode = (DefaultMutableTreeNode) selectedTxnNode.getParent();
                        EITxnMOB eiTxn = (EITxnMOB) xapiTxnNode.getUserObject();

                        receivedMessagePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, eiTxn.getTxnDescription() + " Request", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11)), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));
                        responseMessagePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, eiTxn.getTxnDescription() + " Response", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11)), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));

                        ISOMsg selMsg = ((ISOMsg) selectedObject);
                        String MTI = selMsg.getMTI();
                        ISOMsg incMsg = getMobTxnMessage(selMsg.getTxnReference(), true, (MTI.equalsIgnoreCase("9430") || MTI.equalsIgnoreCase("9431") || MTI.equalsIgnoreCase("0430") || MTI.equalsIgnoreCase("0431")));
                        if (incMsg == null)
                        {
                            SwingUtilities.invokeLater(()
                                    ->
                                    {
                                        removeMobTxnFromLog(selMsg);
                                        txnTree.removeSelectionPath(new TreePath(selectedTxnNode.getPath()));
                                    });
                            return;
                        }
                        incomingTableScroller.setViewportView(new ISOMsgPanel(incMsg).createISOMsgTable());
                        outgoingTableScroller.setViewportView(new ISOMsgPanel((ISOMsg) selectedObject).createISOMsgTable());
                    }
                    else if (selectedObject instanceof EITxnMOB)
                    {
                        EITxnMOB eiTxn = (EITxnMOB) selectedObject;
                        int splitLoc = rightSplitPane.getDividerLocation();

                        rightSplitPane.setLeftComponent(xapiTxnPanel);
                        rightSplitPane.setDividerLocation(splitLoc);

                        if (eiTxn.isApproved())
                        {
                            xapiTxnPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Approved " + eiTxn.getTxnDescription()), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));
                        }
                        else
                        {
                            xapiTxnPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Rejected " + eiTxn.getTxnDescription()), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));
                        }

                        eiTxnTableScroller.setViewportView(createMobMessagesTable(eiTxn));
                    }
                    txnTree.setBorder(null);
                    txnTreeScroller.setBorder(null);
                }
            }
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
    }

    public JTable createPosMessagesTable(EITxn eiTxn)
    {
        Vector dataVector = new Vector();
        if (posTxnLog != null)
        {
            String prevMonth = "00";
            int tranCount = posTxnLog.getSize();
            String procCode = eiTxn.getProcessingCode();

            for (int i = 0;i < tranCount;i++)
            {
                Vector rowVector = new Vector();
                ISOMsg txnMsg = (ISOMsg) posTxnLog.getElementAt(i);
                if ((txnMsg.getProcessingCode() == null ? procCode == null : txnMsg.getProcessingCode().equals(procCode)) && txnMsg.isOutgoing())
                {
                    if ((EICodes.ISO_APPROVED.equals(txnMsg.getResponseCode())) == eiTxn.isApproved())
                    {
                        String MTI;
                        String date = txnMsg.getTransmissionTime() != null ? txnMsg.getTransmissionTime() : "          ";
                        String txnMonth = date.substring(0, 2);

                        int year = Calendar.getInstance().get(Calendar.YEAR);
                        prevMonth = (txnMonth.equals("01")) ? "01" : prevMonth;

                        year = (txnMonth.equals("12") && prevMonth.equals("01")) ? (year - 1) : year;
                        String yearStr = (String.valueOf(year).length() == 2) ? "20" + String.valueOf(year) : String.valueOf(year);
                        String currency = (PHController.getCurrency(txnMsg.getTxnCurrency()) != null) ? String.valueOf(PHController.getCurrency(txnMsg.getTxnCurrency())) : "";

                        try
                        {
                            MTI = "0000" + String.valueOf((Integer.parseInt(txnMsg.getMTI()) - 10));
                            MTI = MTI.substring(MTI.length() - 4);
                        }
                        catch (Exception ex)
                        {
                            MTI = "";
                        }

                        rowVector.add(MTI);
                        rowVector.add(txnMsg.getProcessingCode() + txnMsg.getAccountType1() + txnMsg.getAccountType2());
                        rowVector.add(txnMsg.getTxnReference());
                        rowVector.add(yearStr + "-" + date.substring(0, 2) + "-" + date.substring(2, 4) + " " + date.substring(4, 6) + ":" + date.substring(6, 8) + ":" + date.substring(8, 10));
                        rowVector.add(txnMsg.getAcquirerBIN());
                        rowVector.add(txnMsg.getTerminalID());
                        rowVector.add(protectCard(txnMsg.getAccessCode()));
                        rowVector.add(txnMsg.getAccountNumber1());
                        rowVector.add(txnMsg.getAccountNumber2());
                        rowVector.add(currency);
                        rowVector.add(txnMsg.getTxnAmount());
                        rowVector.add(eiTxn.getTxnDescription());
                        rowVector.add((MTI.equalsIgnoreCase("9420") || MTI.equalsIgnoreCase("9421") || MTI.equalsIgnoreCase("0420") || MTI.equalsIgnoreCase("0421")) ? "Y" : "N");
                        rowVector.add(txnMsg.getResponseCode());
                        dataVector.insertElementAt(rowVector, 0);
                    }
                }
            }
        }

        JTable table = new JTable();
        Font tableFont = table.getTableHeader().getFont();
        table.getTableHeader().setFont(new Font(tableFont.getName(), Font.BOLD, tableFont.getSize()));

        Vector<String> colsVector = new Vector<>();
        colsVector.add("MTI");
        colsVector.add("Processing Code");
        colsVector.add("Reference No.");
        colsVector.add("Date & Time");
        colsVector.add("Acquirer BIN");
        colsVector.add("Terminal ID");
        colsVector.add("Access Code");
        colsVector.add("Account Number");
        colsVector.add("Transfer Account");
        colsVector.add("Txn Currency");
        colsVector.add("Txn Amount");
        colsVector.add("Description");
        colsVector.add("Reversal");
        colsVector.add("Response Code");

        table.setModel(new javax.swing.table.DefaultTableModel(dataVector, colsVector)
        {
            @Override
            public Class<?> getColumnClass(int col)
            {
                if (col == 10)
                {
                    return BigDecimal.class;
                }
                if (col == 0 || col == 1 || col == 13)
                {
                    return Integer.class;
                }
                return String.class;
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return false;
            }
        });

        for (int i = 1;i < colsVector.size();i++)
        {
            table.getColumnModel().getColumn(i).setMinWidth((i == colsVector.size() - 1) ? 150 : 150);
        }

        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));

        table.setPreferredScrollableViewportSize(new Dimension(1200, table.getRowCount() * table.getRowHeight()));
        return prepareTable(table);
    }

    public JTable createMobMessagesTable(EITxnMOB eiTxn)
    {
        Vector dataVector = new Vector();
        if (mobTxnLog != null)
        {
            String prevMonth = "00";
            int tranCount = mobTxnLog.getSize();
            String procCode = eiTxn.getProcessingCode();

            for (int i = 0;i < tranCount;i++)
            {
                Vector rowVector = new Vector();
                ISOMsg txnMsg = (ISOMsg) mobTxnLog.getElementAt(i);
                if ((txnMsg.getProcessingCode() == null ? procCode == null : txnMsg.getProcessingCode().equals(procCode)) && txnMsg.isOutgoing())
                {
                    if ((EICodes.ISO_APPROVED.equals(txnMsg.getResponseCode())) == eiTxn.isApproved())
                    {
                        String MTI;
                        String date = txnMsg.getTransmissionTime() != null ? txnMsg.getTransmissionTime() : "          ";
                        String txnMonth = date.substring(0, 2);

                        int year = Calendar.getInstance().get(Calendar.YEAR);
                        prevMonth = (txnMonth.equals("01")) ? "01" : prevMonth;

                        year = (txnMonth.equals("12") && prevMonth.equals("01")) ? (year - 1) : year;
                        String yearStr = (String.valueOf(year).length() == 2) ? "20" + String.valueOf(year) : String.valueOf(year);
                        String currency = (PHController.getCurrency(txnMsg.getTxnCurrency()) != null) ? String.valueOf(PHController.getCurrency(txnMsg.getTxnCurrency())) : "";

                        try
                        {
                            MTI = "0000" + String.valueOf((Integer.parseInt(txnMsg.getMTI()) - 10));
                            MTI = MTI.substring(MTI.length() - 4);
                        }
                        catch (Exception ex)
                        {
                            MTI = "";
                        }

                        rowVector.add(MTI);
                        rowVector.add(txnMsg.getProcessingCode() + txnMsg.getAccountType1() + txnMsg.getAccountType2());
                        rowVector.add(txnMsg.getTxnReference());
                        rowVector.add(yearStr + "-" + date.substring(0, 2) + "-" + date.substring(2, 4) + " " + date.substring(4, 6) + ":" + date.substring(6, 8) + ":" + date.substring(8, 10));
                        rowVector.add(txnMsg.getAcquirerBIN());
                        rowVector.add(txnMsg.getTerminalID());
                        rowVector.add(protectCard(txnMsg.getAccessCode()));
                        rowVector.add(txnMsg.getAccountNumber1());
                        rowVector.add(txnMsg.getAccountNumber2());
                        rowVector.add(currency);
                        rowVector.add(txnMsg.getTxnAmount());
                        rowVector.add(eiTxn.getTxnDescription());
                        rowVector.add((MTI.equalsIgnoreCase("9420") || MTI.equalsIgnoreCase("9421") || MTI.equalsIgnoreCase("0420") || MTI.equalsIgnoreCase("0421")) ? "Y" : "N");
                        rowVector.add(txnMsg.getResponseCode());
                        dataVector.insertElementAt(rowVector, 0);

                    }
                }
            }
        }

        JTable table = new JTable();
        Font tableFont = table.getTableHeader().getFont();
        table.getTableHeader().setFont(new Font(tableFont.getName(), Font.BOLD, tableFont.getSize()));

        Vector<String> colsVector = new Vector<>();
        colsVector.add("MTI");
        colsVector.add("Processing Code");
        colsVector.add("Reference No.");
        colsVector.add("Date & Time");
        colsVector.add("Acquirer BIN");
        colsVector.add("Terminal ID");
        colsVector.add("Access Code");
        colsVector.add("Account Number");
        colsVector.add("Transfer Account");
        colsVector.add("Txn Currency");
        colsVector.add("Txn Amount");
        colsVector.add("Description");
        colsVector.add("Reversal");
        colsVector.add("Response Code");

        table.setModel(new javax.swing.table.DefaultTableModel(dataVector, colsVector)
        {
            @Override
            public Class<?> getColumnClass(int col)
            {
                if (col == 10)
                {
                    return BigDecimal.class;
                }
                if (col == 0 || col == 1 || col == 13)
                {
                    return Integer.class;
                }
                return String.class;
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return false;
            }
        });

        for (int i = 1;i < colsVector.size();i++)
        {
            table.getColumnModel().getColumn(i).setMinWidth((i == colsVector.size() - 1) ? 150 : 150);
        }

        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));

        table.setPreferredScrollableViewportSize(new Dimension(1200, table.getRowCount() * table.getRowHeight()));
        return prepareTable(table);
    }

    public static JTable prepareTable(JTable table)
    {
        table.getTableHeader().setFont(new Font(table.getTableHeader().getFont().getName(), Font.BOLD, table.getTableHeader().getFont().getSize()));
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table.setAutoCreateRowSorter(true);
        for (int i = 0;i < table.getColumnCount();i++)
        {
            final boolean firstColumn = i == 0;
            table.getColumnModel().getColumn(i).setCellRenderer(new DefaultTableCellRenderer()
            {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
                {
                    JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                    label.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));
                    if (firstColumn)
                    {
                        label.setFont(new Font(label.getFont().getName(), Font.BOLD, label.getFont().getSize()));
                        label.setBackground(new java.awt.Color(0, 204, 204));
                    }
                    label.setHorizontalAlignment((value instanceof Integer || value instanceof BigDecimal || value instanceof Number) ? RIGHT : LEFT);
                    return label;
                }
            });
        }
        return table;
    }

    private void updateTreeUI()
    {
        SwingUtilities.invokeLater(txnTree::updateUI);
    }

    /**
     * @return the bridgeIsoMeter
     */
    public ISOMeter getPosBridgeIsoMeter()
    {
        return posBridgeIsoMeter;
    }

    /**
     * @return the mobBridgeIsoMeter
     */
    public ISOMeter getMobBridgeIsoMeter()
    {
        return mobBridgeIsoMeter;
    }

    public String protectCard(String cardNumber)
    {
        try
        {
            for (int i = 6;i < cardNumber.length() - 3;i++)
            {
                cardNumber = cardNumber.substring(0, i) + "X" + cardNumber.substring(i + 1);
            }
        }
        catch (Exception ex)
        {
            ex = null;
        }
        return cardNumber;
    }

    private void showAboutInfo()
    {
        JOptionPane.showMessageDialog(null,
                "<html><font face=\"Arial\" weight=\"plain\" size=\"2\">PHilae Bridge version 2.5.0, Product licensed to FINCA, Lusaka ZAMBIA"
                + "<br/>Copyright \u00A9 2011 - " + new SimpleDateFormat("yyyy").format(new Date()) + ", Neptune Software Group, 7th floor Victoria Towers,"
                + "<br/>Kilimanjaro Road, Upperhill, Nairobi Kenya. All rights reserved.</font></html>", "PHilae POS Bridge", JOptionPane.INFORMATION_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenu agencyMenu;
    private javax.swing.JMenu agencyMenu1;
    private javax.swing.JMenuItem agencySettingsMenuItem;
    private javax.swing.JMenuItem agencySettingsMenuItemMob;
    private javax.swing.JMenu bridgeMenu;
    public javax.swing.JDialog chargesDialog;
    public javax.swing.JDialog chargesDialogMob;
    private javax.swing.JMenuItem chargesMenuItem;
    private javax.swing.JMenuItem chargesMenuItemMob;
    public static final javax.swing.JTextPane displayConsole = PHMain.displayArea;
    private javax.swing.JScrollPane displayScroller;
    private javax.swing.JMenuItem eiTerminalMenuItem;
    private javax.swing.JMenuItem eiTerminalMenuItemMob;
    private javax.swing.JScrollPane eiTxnTableScroller;
    private javax.swing.JMenuItem extractDataFilesMenuItem;
    private javax.swing.JMenuItem extractDataFilesMenuItemMob;
    private javax.swing.JTable incomingTable;
    private javax.swing.JScrollPane incomingTableScroller;
    private javax.swing.JToolBar isometerToolBar;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    private javax.swing.JToolBar leftToolBar;
    private javax.swing.JSplitPane mainSplitPane;
    public javax.swing.JMenuBar menuBar;
    private javax.swing.JRadioButton mobRadioBtn;
    private javax.swing.JSplitPane msgSplitPane;
    private javax.swing.JTable outgoingTable;
    private javax.swing.JScrollPane outgoingTableScroller;
    private javax.swing.JRadioButton posRadioBtn;
    private javax.swing.JMenuItem procCodeMenuItem;
    private javax.swing.JPanel receivedMessagePanel;
    private javax.swing.JPanel responseMessagePanel;
    private javax.swing.JSplitPane rightSplitPane;
    private javax.swing.JButton shutdownButton;
    private javax.swing.JMenuItem shutdownMenuItem;
    private javax.swing.JMenu smsMenu;
    private javax.swing.JCheckBoxMenuItem suspendServiceCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem suspendServiceCheckBoxMenuItem1;
    private javax.swing.JPanel treePanel;
    private javax.swing.JSeparator treeSeparator;
    private javax.swing.JTree txnTree;
    private javax.swing.JScrollPane txnTreeScroller;
    private javax.swing.JPanel xapiTxnPanel;
    private javax.swing.JTable xapiTxnTable;
    // End of variables declaration//GEN-END:variables
    private final TMPanel tMPanel = new TMPanel();
    private final FLWorker fLWorker = new FLWorker();
    private final EIProcCodePanel procCodePanel = new EIProcCodePanel();
    private final EIProcCodePanelMOB procCodePanelMob = new EIProcCodePanelMOB();
    private final SMSConfigPanel sMSConfigPanel = new SMSConfigPanel();
    private final EIBillerPanelMOB eIBillerPanelMOB = new EIBillerPanelMOB();
    private ISOMeter posBridgeIsoMeter = new ISOMeter(null, "POS", "SUSPENDED");
    private ISOMeter mobBridgeIsoMeter = new ISOMeter(null, "MOB", "SUSPENDED");

}
