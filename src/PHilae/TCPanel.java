/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * TCPanel.java
 *
 * Created on Feb 17, 2012, 10:53:30 AM
 */
package PHilae;

import APX.PHController;
import APX.PHMain;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author Pecherk
 */
public final class TCPanel extends javax.swing.JPanel
{
    private TCValue tCValue = null;
    private EICharge eICharge = new EICharge();
    private final TDClient tDClient = new TDClient();

    /**
     * Creates new form TCPanel
     *
     */
    public TCPanel()
    {
        initComponents();
        setChargeTree();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
     * code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        chargeTreeScroller = new javax.swing.JScrollPane();
        chargeTree = new javax.swing.JTree();
        detailsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        descriptionField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        chargeAccountBox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        statusBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        chargeCodeField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        modifiedByField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        modifiedDateField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        chargeLedgerField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        taxLedgerField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        taxPercentageField = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        taxNameField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        cancelButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        saveButton = new javax.swing.JButton();
        waiversPanel = new javax.swing.JPanel();
        waiverDisplayPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        waivedPercentageField = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        waiverButton = new javax.swing.JButton();
        waiverProductBox = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        matchAccountBox = new javax.swing.JComboBox();
        jLabel20 = new javax.swing.JLabel();
        waiverConditionBox = new javax.swing.JComboBox<>();
        thresholdField = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        waiversTreeScroller = new javax.swing.JScrollPane();
        waiversTree = new javax.swing.JTree();
        currenciesPanel = new javax.swing.JPanel();
        tiersPanel = new javax.swing.JPanel();
        tierDisplayPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        tierMinAmountField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        tierMaxAmountField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        tierChargeAmountField = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        tierButton = new javax.swing.JButton();
        tiersTreeScroller = new javax.swing.JScrollPane();
        tiersTree = new javax.swing.JTree();
        currencyTreeScroller = new javax.swing.JScrollPane();
        currencyTree = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        valueLabel = new javax.swing.JLabel();
        valueField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        minAmountField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        maxAmountField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        chargeTypeBox = new javax.swing.JComboBox();

        chargeTreeScroller.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));

        chargeTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("POS Charges");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Charge");
        treeNode1.add(treeNode2);
        chargeTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        chargeTree.setCellRenderer(new TRenderer());
        chargeTree.setRootVisible(false);
        chargeTree.setShowsRootHandles(true);
        chargeTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                chargeTreeValueChanged(evt);
            }
        });
        chargeTreeScroller.setViewportView(chargeTree);

        detailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Charge Details"));

        jLabel1.setText("Description");

        jLabel6.setText("Charge Account");

        chargeAccountBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Source", "Recipient" }));

        jLabel7.setText("Charge Status");

        statusBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Active", "Closed" }));

        jLabel3.setText("Charge Code");

        chargeCodeField.setEditable(false);
        chargeCodeField.setForeground(new java.awt.Color(51, 102, 255));

        jLabel8.setText("Date Modified");

        modifiedByField.setEditable(false);
        modifiedByField.setForeground(new java.awt.Color(51, 102, 255));

        jLabel9.setText("Modified By");

        modifiedDateField.setEditable(false);
        modifiedDateField.setForeground(new java.awt.Color(51, 102, 255));

        jLabel10.setText("Charge Ledger");

        jLabel17.setText("Tax Ledger");

        jLabel18.setText("Tax Percentage");

        taxPercentageField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        taxPercentageField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                taxPercentageFieldFocusLost(evt);
            }
        });

        jLabel19.setText("Tax Narration");

        javax.swing.GroupLayout detailsPanelLayout = new javax.swing.GroupLayout(detailsPanel);
        detailsPanel.setLayout(detailsPanelLayout);
        detailsPanelLayout.setHorizontalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(taxPercentageField)
                    .addComponent(chargeCodeField)
                    .addComponent(chargeAccountBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 200, Short.MAX_VALUE)
                    .addComponent(statusBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(modifiedDateField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(taxNameField)
                    .addComponent(descriptionField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addComponent(modifiedByField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(taxLedgerField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chargeLedgerField, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        detailsPanelLayout.setVerticalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(descriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(chargeCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detailsPanelLayout.createSequentialGroup()
                        .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(chargeLedgerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(taxLedgerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(detailsPanelLayout.createSequentialGroup()
                        .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(chargeAccountBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(taxPercentageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(statusBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(taxNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(modifiedByField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(modifiedDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cancelButton.setText("Close");
        cancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelButtonActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveButtonActionPerformed(evt);
            }
        });

        waiversPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Charge Waivers"));

        waiverDisplayPanel.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));

        jLabel14.setText("Waiver Product");

        jLabel16.setText("Waived %");

        waivedPercentageField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        waivedPercentageField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                waivedPercentageFieldFocusLost(evt);
            }
        });

        waiverButton.setText("Save Waiver");
        waiverButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                waiverButtonActionPerformed(evt);
            }
        });

        jLabel15.setText("Match Account");

        matchAccountBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "A~Any Account", "B~Both Accounts", "C~Charge Account" }));

        jLabel20.setText("Apply Waiver");

        waiverConditionBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL~For All Transactions", "MVL~When Monthly Velocity is Less Than", "MVM~When Monthly Velocity is More Than", "MOL~When Monthly Volume is Less Than", "MOM~When Monthly Volume is More Than" }));
        waiverConditionBox.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                waiverConditionBoxItemStateChanged(evt);
            }
        });

        thresholdField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        jLabel21.setText("Threshold");

        javax.swing.GroupLayout waiverDisplayPanelLayout = new javax.swing.GroupLayout(waiverDisplayPanel);
        waiverDisplayPanel.setLayout(waiverDisplayPanelLayout);
        waiverDisplayPanelLayout.setHorizontalGroup(
            waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(waiverDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, waiverDisplayPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(waiverButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(waiverDisplayPanelLayout.createSequentialGroup()
                        .addGroup(waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(jLabel20)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(waiverProductBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(waiverDisplayPanelLayout.createSequentialGroup()
                                .addGroup(waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(waiverConditionBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 1, Short.MAX_VALUE)
                                    .addComponent(matchAccountBox, 0, 218, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(waivedPercentageField)
                                    .addComponent(thresholdField))))))
                .addContainerGap())
        );
        waiverDisplayPanelLayout.setVerticalGroup(
            waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(waiverDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(waiverProductBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(waivedPercentageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(matchAccountBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(waiverDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(waiverConditionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(thresholdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(waiverButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        waiversTreeScroller.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));

        waiversTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Waivers");
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Add Waiver");
        treeNode1.add(treeNode2);
        waiversTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        waiversTree.setCellRenderer(new TRenderer());
        waiversTree.setRootVisible(false);
        waiversTree.setShowsRootHandles(true);
        waiversTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                waiversTreeValueChanged(evt);
            }
        });
        waiversTreeScroller.setViewportView(waiversTree);

        javax.swing.GroupLayout waiversPanelLayout = new javax.swing.GroupLayout(waiversPanel);
        waiversPanel.setLayout(waiversPanelLayout);
        waiversPanelLayout.setHorizontalGroup(
            waiversPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, waiversPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(waiversTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(waiverDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        waiversPanelLayout.setVerticalGroup(
            waiversPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(waiversPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(waiversPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(waiverDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(waiversTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        currenciesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Charge Value"));

        tiersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Charge Tiers")));

        tierDisplayPanel.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));

        jLabel11.setText("Tier Tran Limits");

        tierMinAmountField.setEditable(false);
        tierMinAmountField.setForeground(new java.awt.Color(51, 102, 255));
        tierMinAmountField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        jLabel12.setText("-");

        tierMaxAmountField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        tierMaxAmountField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                tierMaxAmountFieldFocusLost(evt);
            }
        });

        jLabel13.setText("Charge Amount");

        tierChargeAmountField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        tierChargeAmountField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                tierChargeAmountFieldFocusLost(evt);
            }
        });

        tierButton.setText("Save Tier");
        tierButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tierButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tierDisplayPanelLayout = new javax.swing.GroupLayout(tierDisplayPanel);
        tierDisplayPanel.setLayout(tierDisplayPanelLayout);
        tierDisplayPanelLayout.setHorizontalGroup(
            tierDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tierDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tierDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tierDisplayPanelLayout.createSequentialGroup()
                        .addGroup(tierDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tierDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tierDisplayPanelLayout.createSequentialGroup()
                                .addComponent(tierMinAmountField, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tierMaxAmountField, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE))
                            .addComponent(tierChargeAmountField)))
                    .addComponent(tierButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        tierDisplayPanelLayout.setVerticalGroup(
            tierDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tierDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tierDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(tierMinAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(tierMaxAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tierDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(tierChargeAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tierButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tiersTreeScroller.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));

        tiersTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Tiers");
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Add Tier");
        treeNode1.add(treeNode2);
        tiersTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        tiersTree.setCellRenderer(new TRenderer());
        tiersTree.setRootVisible(false);
        tiersTree.setShowsRootHandles(true);
        tiersTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                tiersTreeValueChanged(evt);
            }
        });
        tiersTreeScroller.setViewportView(tiersTree);

        javax.swing.GroupLayout tiersPanelLayout = new javax.swing.GroupLayout(tiersPanel);
        tiersPanel.setLayout(tiersPanelLayout);
        tiersPanelLayout.setHorizontalGroup(
            tiersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tiersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tiersTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tierDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        tiersPanelLayout.setVerticalGroup(
            tiersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tiersPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(tiersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tiersTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(tierDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        currencyTreeScroller.setBorder(null);

        currencyTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Currencies");
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("USD~US Dollar");
        treeNode1.add(treeNode2);
        currencyTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        currencyTree.setCellRenderer(new TRenderer());
        currencyTree.setRootVisible(false);
        currencyTree.setShowsRootHandles(true);
        currencyTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                currencyTreeValueChanged(evt);
            }
        });
        currencyTreeScroller.setViewportView(currencyTree);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));

        valueLabel.setText("Charge Value");

        valueField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        valueField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                valueFieldFocusLost(evt);
            }
        });

        jLabel4.setText("Min. Charge");

        minAmountField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        jLabel5.setText("Max. Charge");

        maxAmountField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        jLabel2.setText("Charge Type");

        chargeTypeBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Constant", "Percentage", "Tiered" }));
        chargeTypeBox.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                chargeTypeBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minAmountField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(chargeTypeBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(valueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(valueField, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                    .addComponent(maxAmountField))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valueLabel)
                    .addComponent(valueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(chargeTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(minAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(maxAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout currenciesPanelLayout = new javax.swing.GroupLayout(currenciesPanel);
        currenciesPanel.setLayout(currenciesPanelLayout);
        currenciesPanelLayout.setHorizontalGroup(
            currenciesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, currenciesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currencyTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(currenciesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tiersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        currenciesPanelLayout.setVerticalGroup(
            currenciesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currenciesPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(currenciesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currencyTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(currenciesPanelLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tiersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chargeTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(waiversPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(detailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(currenciesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(detailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currenciesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(waiversPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(chargeTreeScroller))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        currenciesPanel.getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    private void chargeTypeBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_chargeTypeBoxItemStateChanged
    {//GEN-HEADEREND:event_chargeTypeBoxItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            if (chargeTypeBox.getSelectedItem().equals("Percentage"))
            {
                valueLabel.setText("Percentage");
                valueField.setEditable(true);
                minAmountField.setEditable(true);
                maxAmountField.setEditable(true);
            }
            else if (chargeTypeBox.getSelectedItem().equals("Tiered"))
            {
                valueField.setText("0.00");
                minAmountField.setText("0.00");
                maxAmountField.setText("0.00");
                valueField.setEditable(false);
                minAmountField.setEditable(false);
                maxAmountField.setEditable(false);
            }
            else
            {
                valueLabel.setText("Charge Amount");
                valueField.setEditable(true);
                minAmountField.setEditable(false);
                maxAmountField.setEditable(false);
            }
            setTiersPanel();
        }
    }//GEN-LAST:event_chargeTypeBoxItemStateChanged

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
    {//GEN-HEADEREND:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        PHMain.phFrame.hidePosChargesDialog();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void chargeTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_chargeTreeValueChanged
    {//GEN-HEADEREND:event_chargeTreeValueChanged
        // TODO add your handling code here:
        displayCharge();
    }//GEN-LAST:event_chargeTreeValueChanged

    public void setChargeTree()
    {
        DefaultMutableTreeNode rootNode = ((DefaultMutableTreeNode) chargeTree.getModel().getRoot());
        rootNode.removeAllChildren();

        Object[] chargeCodes = PHController.getPosCharges().keySet().toArray();
        Arrays.sort(chargeCodes);
        for (Object chargeCode : chargeCodes)
        {
            rootNode.add(new DefaultMutableTreeNode(chargeCode + "~" + PHController.getPosCharges().get(chargeCode).getDescription()));
        }

        updateChargeTree();
        setCurrencyTree();
    }

    public void updateChargeTree()
    {
        chargeTreeScroller.getHorizontalScrollBar().setValue(0);
        chargeTreeScroller.getVerticalScrollBar().setValue(0);
        chargeTree.updateUI();
    }

    private boolean isNumberValid(String num)
    {
        try
        {
            return (Double.parseDouble(num) >= 0);
        }
        catch (Exception ex)
        {
            return false;
        }
    }

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveButtonActionPerformed
    {//GEN-HEADEREND:event_saveButtonActionPerformed
        // TODO add your handling code here:
        if (isChargeComplete())
        {
            eICharge.setChargeCode(chargeCodeField.getText().trim());
            eICharge.setDescription(descriptionField.getText().trim());
            eICharge.setChargeAccount(chargeAccountBox.getSelectedItem().toString());
            eICharge.setChargeLedger(chargeLedgerField.getText().trim());

            eICharge.setTaxLedger(taxLedgerField.getText().trim());
            eICharge.setTaxPercentage(new BigDecimal(taxPercentageField.getText()));
            eICharge.setTaxName(taxNameField.getText().trim());
            eICharge.setStatus(statusBox.getSelectedItem().toString());

            eICharge.setDateModified(new Date());
            eICharge.setLastModifiedBy(EILogin.getAdminName());
            eICharge.setModule(PHController.posChannelCode);
            tCValue.setChargeType(chargeTypeBox.getSelectedItem().toString());

            tCValue.setChargeValue(new BigDecimal(valueField.getText().trim()).setScale(2, RoundingMode.DOWN));
            tCValue.setMinAmount(new BigDecimal(minAmountField.getText().trim()).setScale(2, RoundingMode.DOWN));
            tCValue.setMaxAmount(new BigDecimal(maxAmountField.getText().trim()).setScale(2, RoundingMode.DOWN));
            eICharge.getValues().put(tCValue.getCurrency(), tCValue);

            if ("Save".equals(saveButton.getText()) ? JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(PHMain.phFrame.chargesDialog, "Are you sure you want to save this new charge?", "Confirm", JOptionPane.YES_NO_OPTION)
                : JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(PHMain.phFrame.chargesDialog, "Are you sure you want to save changes to this charge?", "Confirm", JOptionPane.YES_NO_OPTION))
            {
                PHController.getPosCharges().put(eICharge.getChargeCode(), eICharge);
                if (tDClient.upsertCharge(eICharge))
                {
                    JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Charge saved successfully.");
                }
                else
                {
                    JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Unable to save charge. Please refer to log for more details.", "Save Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private boolean isChargeComplete()
    {
        if (descriptionField.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Charge description required.");
            return false;
        }

        if (chargeLedgerField.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Charge ledger required.");
            return false;
        }

        if (taxLedgerField.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Tax ledger required.");
            return false;
        }

        if (taxPercentageField.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Tax percentage required.");
            return false;
        }

        if (taxNameField.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Tax narration required.");
            return false;
        }

        if (valueField.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Charge value (amount or percentage) required.");
            return false;
        }

        String value = valueField.getText().trim();

        if (!isNumberValid(value))
        {
            JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Invalid charge amount or percentage.");
            return false;
        }

        if (!PHController.PrimaryCurrencyCode.equals(tCValue.getCurrency()) && !eICharge.getValues().containsKey(PHController.PrimaryCurrencyCode))
        {
            JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "You must set the charge value for primary currency [" + PHController.PrimaryCurrencyCode + "].");
            return false;
        }

        if (chargeTypeBox.getSelectedIndex() == 0)
        {
            minAmountField.setText(value);
            maxAmountField.setText(value);
        }

        if (minAmountField.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Charge minimum amount required.");
            return false;
        }

        String minAmt = minAmountField.getText().trim();

        if (!isNumberValid(minAmt))
        {
            JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Invalid charge minimum amount.");
            return false;
        }

        if (maxAmountField.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Charge maximum amount required.");
            return false;
        }

        String maxAmt = maxAmountField.getText().trim();

        if (!isNumberValid(maxAmt))
        {
            JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Invalid charge maximum amount.");
            return false;
        }

        if (Double.parseDouble(maxAmt) < Double.parseDouble(minAmt))
        {
            JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Maximum amount cannot be less than minimum amount.");
            return false;
        }

        for (TCValue tcv : eICharge.getValues().values())
        {
            if ("Tiered".equals(tcv.getChargeType()))
            {
                if (tcv.getTiers().isEmpty())
                {
                    JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "You must save atleast one tier for " + tcv.getCurrency() + " charge which is tiered [or change charge type].", "Missing Tiers", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            }
        }

        return true;
    }

    private void tiersTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_tiersTreeValueChanged
    {//GEN-HEADEREND:event_tiersTreeValueChanged
        // TODO add your handling code here:
        displayTier();
}//GEN-LAST:event_tiersTreeValueChanged

    private void tierMaxAmountFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_tierMaxAmountFieldFocusLost
    {//GEN-HEADEREND:event_tierMaxAmountFieldFocusLost
        // TODO add your handling code here:
        String maxAmt = tierMaxAmountField.getText().trim();
        try
        {
            BigDecimal ceiling = new BigDecimal(maxAmt).setScale(2, RoundingMode.DOWN);
            tierMaxAmountField.setText(ceiling.toPlainString());
            tierMinAmountField.setText(getTierFloor(ceiling).toPlainString());
        }
        catch (Exception ex)
        {
            if (maxAmt.length() > 0)
            {
                tierMaxAmountField.requestFocus();
                tierMaxAmountField.selectAll();
            }
        }
    }//GEN-LAST:event_tierMaxAmountFieldFocusLost

    private void tierButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tierButtonActionPerformed
    {//GEN-HEADEREND:event_tierButtonActionPerformed
        // TODO add your handling code here:
        TCTier tXTier = new TCTier();
        if (tierMaxAmountField.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Tier maximum amount required.");
            return;
        }

        String tierMax = tierMaxAmountField.getText().trim();

        if (!isNumberValid(tierMax))
        {
            JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Invalid tier maximum amount.");
            return;
        }

        String tierCharge = tierChargeAmountField.getText().trim();

        tXTier.setTierCeiling(new BigDecimal(tierMax));
        tXTier.setChargeAmount(new BigDecimal(tierCharge));

        if (tierButton.getText().equals("Save Tier"))
        {
            if (tierChargeAmountField.getText().trim().equals(""))
            {
                JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Tier charge amount required.");
                return;
            }

            if (!isNumberValid(tierCharge))
            {
                JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Invalid tier charge amount.");
                return;
            }

            tXTier.setTierFloor(getTierFloor(new BigDecimal(tierMax)));

            if (tCValue.getTiers().containsKey(tXTier.getTierCeiling()))
            {
                JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Tier already exists.");
                return;
            }

            tCValue.getTiers().put(tXTier.getTierCeiling(), tXTier);
            if (tCValue.getTiers().containsKey(tXTier.getTierCeiling()))
            {
                JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Tier saved successfully.");
                eICharge.getValues().put(tCValue.getCurrency(), tCValue);
                displayTiers(tCValue.getCurrency());
                showTier(tierMax);
            }
            else
            {
                JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Unable to save tier. Please refer to log for more details.", "Save Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else
        {
            tCValue.getTiers().remove(tXTier.getTierCeiling());
            if (!tCValue.getTiers().containsKey(tXTier.getTierCeiling()))
            {
                JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Tier removed successfully.");
                eICharge.getValues().put(tCValue.getCurrency(), tCValue);
                displayTiers(tCValue.getCurrency());
            }
            else
            {
                JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Failed to remove tier. Please refer to log for more details.", "Delete Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_tierButtonActionPerformed

    private void tierChargeAmountFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_tierChargeAmountFieldFocusLost
    {//GEN-HEADEREND:event_tierChargeAmountFieldFocusLost
        // TODO add your handling code here:
        String chargeAmt = tierChargeAmountField.getText().trim();
        try
        {
            tierChargeAmountField.setText(new BigDecimal(chargeAmt).setScale(2, RoundingMode.DOWN).toPlainString());
        }
        catch (Exception ex)
        {
            if (chargeAmt.length() > 0)
            {
                tierChargeAmountField.requestFocus();
                tierChargeAmountField.selectAll();
            }
        }
    }//GEN-LAST:event_tierChargeAmountFieldFocusLost

    private void waivedPercentageFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_waivedPercentageFieldFocusLost
    {//GEN-HEADEREND:event_waivedPercentageFieldFocusLost
        // TODO add your handling code here:
        String waivedPercentage = waivedPercentageField.getText().trim();
        try
        {
            waivedPercentageField.setText(new BigDecimal(waivedPercentage).setScale(2, RoundingMode.DOWN).toPlainString());
            if (Double.parseDouble(waivedPercentage) > 100D || Double.parseDouble(waivedPercentage) < 0.0D)
            {
                waivedPercentageField.requestFocus();
                waivedPercentageField.selectAll();
            }
        }
        catch (Exception ex)
        {
            if (waivedPercentage.length() > 0)
            {
                waivedPercentageField.requestFocus();
                waivedPercentageField.selectAll();
            }
        }
}//GEN-LAST:event_waivedPercentageFieldFocusLost

    private void waiverButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_waiverButtonActionPerformed
    {//GEN-HEADEREND:event_waiverButtonActionPerformed
        // TODO add your handling code here:
        if (waiverProductBox.getSelectedItem().toString().trim().equals(""))
        {
            JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Select the account product to which this waiver will apply.");
            return;
        }

        if (!isNumberValid(waivedPercentageField.getText().trim()))
        {
            JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Invalid waiver percentage [it must be a number between 0 and 100].");
            return;
        }

        if (Double.parseDouble(waivedPercentageField.getText().trim()) <= 0 || Double.parseDouble(waivedPercentageField.getText().trim()) > 100)
        {
            JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Waiver percentage MUST be a number greater than 0 and less than 100.");
            return;
        }

        TCWaiver tXWaiver = new TCWaiver();
        tXWaiver.setProductId(Integer.parseInt(waiverProductBox.getSelectedItem().toString().split("~")[0].trim()));
        tXWaiver.setMatchAccount(matchAccountBox.getSelectedItem().toString().split("~")[0].trim());
        tXWaiver.setWaivedPercentage(new BigDecimal(waivedPercentageField.getText().trim()));
        tXWaiver.setWaiverCondition(waiverConditionBox.getSelectedItem().toString().split("~")[0].trim());
        tXWaiver.setThresholdValue(new BigDecimal(thresholdField.getText().trim()));

        if (waiverButton.getText().equals("Save Waiver"))
        {
            eICharge.getWaivers().put(tXWaiver.getProductId(), tXWaiver);
            if (eICharge.getWaivers().containsKey(tXWaiver.getProductId()))
            {
                JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Waiver saved successfully.");
                setWaiversTree();
                showWaiver(String.valueOf(tXWaiver.getProductId()));
            }
            else
            {
                JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Failed to save waiver. Please refer to log for more details.", "Save Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else
        {
            eICharge.getWaivers().remove(tXWaiver.getProductId());
            if (!eICharge.getWaivers().containsKey(tXWaiver.getProductId()))
            {
                JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Waiver removed successfully.");
                setWaiversTree();
                showWaiver("Add Waiver");
            }
            else
            {
                JOptionPane.showMessageDialog(PHMain.phFrame.chargesDialog, "Failed to remove waiver. Please refer to log for more details.", "Delete Error", JOptionPane.ERROR_MESSAGE);
            }
        }
}//GEN-LAST:event_waiverButtonActionPerformed

    private void waiversTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_waiversTreeValueChanged
    {//GEN-HEADEREND:event_waiversTreeValueChanged
        // TODO add your handling code here:
        displayWaiver();
}//GEN-LAST:event_waiversTreeValueChanged

    private void valueFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_valueFieldFocusLost
    {//GEN-HEADEREND:event_valueFieldFocusLost
        // TODO add your handling code here:
        String value = valueField.getText().trim();
        if (!"".equals(value))
        {
            if (!isNumberValid(value))
            {
                valueField.requestFocus();
                valueField.selectAll();
            }
            else
            {
                value = new BigDecimal(value).setScale(2, RoundingMode.DOWN).toPlainString();
                valueField.setText(value);
                if (chargeTypeBox.getSelectedIndex() == 0)
                {
                    minAmountField.setText(value);
                    maxAmountField.setText(value);
                }
            }
        }
    }//GEN-LAST:event_valueFieldFocusLost

    private void taxPercentageFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_taxPercentageFieldFocusLost
    {//GEN-HEADEREND:event_taxPercentageFieldFocusLost
        // TODO add your handling code here:
        String value = taxPercentageField.getText().trim();
        if (!"".equals(value))
        {
            if (!isNumberValid(value))
            {
                taxPercentageField.requestFocus();
                taxPercentageField.selectAll();
            }
            else if (Double.parseDouble(value) > 100D || Double.parseDouble(value) < 0.0D)
            {
                taxPercentageField.requestFocus();
                taxPercentageField.selectAll();
            }
            else
            {
                value = new BigDecimal(value).setScale(2, RoundingMode.DOWN).toPlainString();
                taxPercentageField.setText(value);
            }
        }
    }//GEN-LAST:event_taxPercentageFieldFocusLost

    private void currencyTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_currencyTreeValueChanged
    {//GEN-HEADEREND:event_currencyTreeValueChanged
        // TODO add your handling code here:
        DefaultMutableTreeNode currencyNode = (DefaultMutableTreeNode) currencyTree.getLastSelectedPathComponent();
        if (currencyNode != null)
        {
            displayValue(currencyNode.getUserObject().toString().split("~")[0].trim());
        }
    }//GEN-LAST:event_currencyTreeValueChanged

    private void waiverConditionBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_waiverConditionBoxItemStateChanged
    {//GEN-HEADEREND:event_waiverConditionBoxItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            thresholdField.setEditable(waiverConditionBox.getSelectedIndex() != 0);
            thresholdField.setText(waiverConditionBox.getSelectedIndex() != 0 ? thresholdField.getText().trim() : "0");
        }
    }//GEN-LAST:event_waiverConditionBoxItemStateChanged

    private void showWaiver(String waiverID)
    {
        DefaultMutableTreeNode waiverRootNode = ((DefaultMutableTreeNode) waiversTree.getModel().getRoot());
        DefaultMutableTreeNode child = waiverRootNode.getFirstLeaf();
        while (child != null)
        {
            if (child.getUserObject().toString().contains("~") ? waiverID.equals(child.getUserObject().toString().split("~")[0].trim()) : waiverID.equals(child.getUserObject().toString()))
            {
                waiversTree.setSelectionPath(new TreePath(child.getPath()));
                waiversTree.updateUI();
                return;
            }
            child = child.getNextSibling();
        }
    }

    private void displayValue(String currencyCode)
    {
        if (tCValue != null)
        {
            try
            {
                tCValue.setChargeType(chargeTypeBox.getSelectedItem().toString());
                tCValue.setChargeValue(new BigDecimal(valueField.getText()));
                tCValue.setMinAmount(new BigDecimal(minAmountField.getText()));
                tCValue.setMaxAmount(new BigDecimal(maxAmountField.getText()));
                eICharge.getValues().put(tCValue.getCurrency(), tCValue);
            }
            catch (Exception ex)
            {
                ex = null;
            }
        }
        tCValue = eICharge.getValues().containsKey(currencyCode) ? eICharge.getValues().get(currencyCode) : new TCValue();
        tCValue.setCurrency(currencyCode);
        chargeTypeBox.setSelectedItem(tCValue.getChargeType());
        valueField.setText(tCValue.getChargeValue().toPlainString());
        minAmountField.setText(tCValue.getMinAmount().toPlainString());
        maxAmountField.setText(tCValue.getMaxAmount().toPlainString());
        displayTiers(currencyCode);
    }

    public void displayCharge()
    {
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) chargeTree.getModel().getRoot();
        if (rootNode.getChildCount() > 0)
        {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) chargeTree.getLastSelectedPathComponent();
            selectedNode = selectedNode == null ? (DefaultMutableTreeNode) rootNode.getFirstChild() : selectedNode;
            eICharge = "Add Charge".equalsIgnoreCase(selectedNode.getUserObject().toString()) ? null : PHController.getPosCharges().get(selectedNode.getUserObject().toString().split("~")[0].trim());
            if (eICharge == null)
            {
                eICharge = new EICharge();
                tCValue = new TCValue();
                eICharge.setChargeCode("A" + String.format("%02d", (PHController.getPosCharges().size() + 1)));
                eICharge.setDescription("");
                descriptionField.setText(eICharge.getDescription());
                chargeTypeBox.setSelectedIndex(0);
                chargeLedgerField.setText("");
                taxLedgerField.setText("");
                taxPercentageField.setText("");
                taxNameField.setText("");
                valueField.setText("");
                minAmountField.setText("");
                maxAmountField.setText("");
                chargeAccountBox.setSelectedIndex(0);
                statusBox.setSelectedIndex(0);
                chargeCodeField.setText(eICharge.getChargeCode());
                modifiedByField.setText("");
                modifiedDateField.setText(String.valueOf(new Date()));
                saveButton.setEnabled(true);
                saveButton.setText("Save");
                setCurrencyTree();
                setWaiversTree();
                displayTiers(tCValue.getCurrency());
            }
            else
            {
                tCValue = eICharge.getValues().containsKey(PHController.PrimaryCurrencyCode) ? eICharge.getValues().get(PHController.PrimaryCurrencyCode) : new TCValue();
                chargeCodeField.setText(eICharge.getChargeCode());
                descriptionField.setText(eICharge.getDescription());
                chargeAccountBox.setSelectedItem(eICharge.getChargeAccount());
                chargeLedgerField.setText(eICharge.getChargeLedger());
                taxLedgerField.setText(eICharge.getTaxLedger());
                taxPercentageField.setText(eICharge.getTaxPercentage().toPlainString());
                taxNameField.setText(eICharge.getTaxName());
                statusBox.setSelectedItem(eICharge.getStatus());
                modifiedByField.setText(eICharge.getLastModifiedBy());
                modifiedDateField.setText(new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss a").format(eICharge.getDateModified()));
                chargeTypeBox.setSelectedItem(tCValue.getChargeType());
                valueField.setText(tCValue.getChargeValue().toPlainString());
                minAmountField.setText(tCValue.getMinAmount().toPlainString());
                maxAmountField.setText(tCValue.getMaxAmount().toPlainString());
                saveButton.setText("Update");
                saveButton.setEnabled(true);
                setCurrencyTree();
                setWaiversTree();
            }

            switch (chargeCodeField.getText().trim())
            {
                case "31":
                case "38":
                    chargeAccountBox.setSelectedIndex(0);
                    chargeTypeBox.setSelectedIndex(0);
                    chargeAccountBox.setEnabled(false);
                    chargeTypeBox.setEnabled(false);
                    break;
                default:
                    chargeAccountBox.setEnabled(chargeCodeField.getText().trim().startsWith("40"));
                    chargeTypeBox.setEnabled(true);
                    break;
            }
        }
        minAmountField.setEditable(chargeTypeBox.getSelectedIndex() == 1);
        maxAmountField.setEditable(chargeTypeBox.getSelectedIndex() == 1);
    }

    public void setCurrencyTree()
    {
        DefaultMutableTreeNode currencyRootNode = ((DefaultMutableTreeNode) currencyTree.getModel().getRoot());
        currencyRootNode.removeAllChildren();

        tDClient.queryCurrencies().stream().forEach((currency)
            -> 
            {
                currencyRootNode.add(new DefaultMutableTreeNode(currency.getCurrencyCode() + "~" + currency.getCurrencyName()));
        });
        updateCurrencyTree();
        showCurrency(PHController.PrimaryCurrencyCode);
    }

    public void updateCurrencyTree()
    {
        currencyTreeScroller.getHorizontalScrollBar().setValue(0);
        currencyTreeScroller.getVerticalScrollBar().setValue(0);
        currencyTree.updateUI();
    }

    private void displayTier()
    {
        DefaultMutableTreeNode selectedTierNode = (DefaultMutableTreeNode) tiersTree.getLastSelectedPathComponent();
        if (selectedTierNode != null)
        {
            String selectedTier = selectedTierNode.getUserObject().toString();
            if (selectedTier.equals("Add Tier"))
            {
                tierMaxAmountField.setEditable(true);
                tierChargeAmountField.setEditable(true);
                tierChargeAmountField.setText("");
                tierMaxAmountField.setText("");
                tierMinAmountField.setText("");
                tierButton.setText("Save Tier");
            }
            else
            {
                BigDecimal ceiling = new BigDecimal(selectedTier.split("-")[1].replace("]", "").trim());
                for (TCTier tier : tCValue.getTiers().values())
                {
                    if (tier.getTierCeiling().compareTo(ceiling) == 0)
                    {
                        tierMaxAmountField.setEditable(false);
                        tierChargeAmountField.setEditable(false);
                        tierMaxAmountField.setText(tier.getTierCeiling().setScale(2, RoundingMode.DOWN).toPlainString());
                        tierChargeAmountField.setText(tier.getChargeAmount().setScale(2, RoundingMode.DOWN).toPlainString());
                        tierMinAmountField.setText(tier.getTierFloor().setScale(2, RoundingMode.DOWN).toPlainString());
                        tierButton.setText("Remove Tier");
                        break;
                    }
                }
            }
        }
    }

    public BigDecimal getTierFloor(BigDecimal tierCeiling)
    {
        BigDecimal floor = new BigDecimal(0.01).setScale(2, RoundingMode.DOWN);
        for (TCTier tier : tCValue.getTiers().values())
        {
            floor = (tier.getTierCeiling().compareTo(floor) > 0 && tier.getTierCeiling().compareTo(tierCeiling) < 0) ? tier.getTierCeiling().add(new BigDecimal(0.01)) : floor;
        }
        return floor.setScale(2, RoundingMode.DOWN);
    }

    private void setTierFloors(String currency)
    {
        BigDecimal floor = new BigDecimal(0.01).setScale(2, RoundingMode.DOWN);
        Object[] tiers = eICharge.getValues().get(currency).getTiers().values().toArray();
        if (tiers.length > 0)
        {
            Arrays.sort(tiers);
            for (Object tier : tiers)
            {
                ((TCTier) tier).setTierFloor(floor);
                eICharge.getValues().get(currency).getTiers().put(((TCTier) tier).getTierCeiling(), ((TCTier) tier));
                floor = ((TCTier) tier).getTierCeiling().add(new BigDecimal(0.01).setScale(2, RoundingMode.DOWN));
            }
        }
        PHController.getPosCharges().put(eICharge.getChargeCode(), eICharge);
    }

    private void showTier(Object tierID)
    {
        DefaultMutableTreeNode tierRootNode = ((DefaultMutableTreeNode) tiersTree.getModel().getRoot());
        DefaultMutableTreeNode child = tierRootNode.getFirstLeaf();
        while (child != null)
        {
            if (child.getUserObject().toString().equals(tierID) || child.getUserObject().equals(tierID))
            {
                tiersTree.setSelectionPath(new TreePath(child.getPath()));
                tiersTree.updateUI();
                return;
            }
            child = child.getNextSibling();
        }
    }

    public void displayTiers(String currency)
    {
        DefaultMutableTreeNode tierRootNode = ((DefaultMutableTreeNode) tiersTree.getModel().getRoot());
        tierRootNode.removeAllChildren();

        tierRootNode.add(new DefaultMutableTreeNode("Add Tier"));
        if (eICharge.getValues().containsKey(currency))
        {
            setTierFloors(currency);
            Object[] tiers = eICharge.getValues().get(currency).getTiers().values().toArray();
            if (tiers.length > 0)
            {
                Arrays.sort(tiers);
                for (Object tier : tiers)
                {
                    tierRootNode.add(new DefaultMutableTreeNode(tier));
                }
            }
        }
        updateTiersTree();
        setTiersPanel();
    }

    public void updateTiersTree()
    {
        tiersTreeScroller.getHorizontalScrollBar().setValue(0);
        tiersTreeScroller.getVerticalScrollBar().setValue(0);
        tiersTree.updateUI();
    }

    private void setTiersPanel()
    {
        tiersTree.setEnabled(chargeTypeBox.getSelectedItem().equals("Tiered"));
        for (Component c : tierDisplayPanel.getComponents())
        {
            if (!(c instanceof JLabel))
            {
                c.setEnabled(chargeTypeBox.getSelectedItem().equals("Tiered"));
                if (c instanceof JTextField)
                {
                    ((JTextField) c).setText("");
                }
            }
        }
        if (chargeTypeBox.getSelectedItem().equals("Tiered"))
        {
            showTier("Add Tier");
        }
    }

    public void setWaiversTree()
    {
        populateWaiverProductsBox(false);
        DefaultMutableTreeNode waiverRootNode = ((DefaultMutableTreeNode) waiversTree.getModel().getRoot());

        waiverRootNode.removeAllChildren();
        waiverRootNode.add(new DefaultMutableTreeNode("Add Waiver"));

        HashMap<Integer, TCWaiver> waiversMap = eICharge.getWaivers();
        Object[] productIds = waiversMap.keySet().toArray();
        Arrays.sort(productIds);
        for (Object productId : productIds)
        {
            waiverRootNode.add(new DefaultMutableTreeNode(productId + "~[" + waiversMap.get(productId).getWaivedPercentage().toPlainString() + "%] " + (!"0".equals(String.valueOf(productId)) ? tDClient.queryProducts(Integer.valueOf(String.valueOf(productId)))[0][1].toString() : "All Products")));
        }
        showWaiver("Add Waiver");
        updateWaiversTree();
    }

    public void updateWaiversTree()
    {
        waiversTreeScroller.getHorizontalScrollBar().setValue(0);
        waiversTreeScroller.getVerticalScrollBar().setValue(0);
        waiversTree.updateUI();
    }

    private void showCurrency(String currencyCode)
    {
        DefaultMutableTreeNode currencyRootNode = ((DefaultMutableTreeNode) currencyTree.getModel().getRoot());
        DefaultMutableTreeNode child = currencyRootNode.getFirstLeaf();
        while (child != null)
        {
            if (child.getUserObject().toString().contains("~") ? currencyCode.equals(child.getUserObject().toString().split("~")[0].trim()) : currencyCode.equals(child.getUserObject().toString()))
            {
                currencyTree.setSelectionPath(new TreePath(child.getPath()));
                currencyTree.updateUI();
                return;
            }
            child = child.getNextSibling();
        }
    }

    private void displayWaiver()
    {
        DefaultMutableTreeNode selectedWaiverNode = (DefaultMutableTreeNode) waiversTree.getLastSelectedPathComponent();
        if (selectedWaiverNode != null)
        {
            String selectedWaiver = selectedWaiverNode.getUserObject().toString();
            if (selectedWaiver.equals("Add Waiver"))
            {
                populateWaiverProductsBox(false);
                waiverProductBox.setEnabled(true);
                waivedPercentageField.setEditable(true);
                matchAccountBox.setEnabled(true);
                waiverConditionBox.setEnabled(true);
                waiverProductBox.setSelectedIndex(0);
                tDClient.selectItemByCode(matchAccountBox, "C");
                waiverConditionBox.setSelectedIndex(0);
                waivedPercentageField.setText("");
                waiverButton.setText("Save Waiver");
                thresholdField.setEditable(true);
            }
            else
            {
                populateWaiverProductsBox(true);
                TCWaiver waiver = eICharge.getWaivers().get(Integer.parseInt(selectedWaiver.split("~")[0].trim()));
                if (waiver != null)
                {
                    waiverProductBox.setEnabled(false);
                    waivedPercentageField.setEditable(false);
                    matchAccountBox.setEnabled(false);
                    waiverConditionBox.setEnabled(false);
                    tDClient.selectItemByCode(waiverProductBox, String.valueOf(waiver.getProductId()));
                    waivedPercentageField.setText(waiver.getWaivedPercentage().toPlainString());
                    thresholdField.setText(waiver.getThresholdValue().toPlainString());
                    tDClient.selectItemByCode(matchAccountBox, waiver.getMatchAccount());
                    tDClient.selectItemByCode(waiverConditionBox, waiver.getWaiverCondition());
                    waiverButton.setText("Remove Waiver");
                    thresholdField.setEditable(false);
                }
            }
        }
    }

    private void populateWaiverProductsBox(boolean all)
    {
        waiverProductBox.removeAllItems();
        waiverProductBox.addItem("");
        waiverProductBox.addItem("0 ~ All Products");
        for (Object[] product : tDClient.queryProducts())
        {
            if (all || !eICharge.getWaivers().containsKey(product[0]))
            {
                waiverProductBox.addItem(product[0] + " ~ " + product[1]);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox chargeAccountBox;
    private javax.swing.JTextField chargeCodeField;
    private javax.swing.JTextField chargeLedgerField;
    private javax.swing.JTree chargeTree;
    private javax.swing.JScrollPane chargeTreeScroller;
    private javax.swing.JComboBox chargeTypeBox;
    private javax.swing.JPanel currenciesPanel;
    private javax.swing.JTree currencyTree;
    private javax.swing.JScrollPane currencyTreeScroller;
    private javax.swing.JTextField descriptionField;
    private javax.swing.JPanel detailsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JComboBox matchAccountBox;
    private javax.swing.JTextField maxAmountField;
    private javax.swing.JTextField minAmountField;
    private javax.swing.JTextField modifiedByField;
    private javax.swing.JTextField modifiedDateField;
    private javax.swing.JButton saveButton;
    private javax.swing.JComboBox statusBox;
    private javax.swing.JTextField taxLedgerField;
    private javax.swing.JTextField taxNameField;
    private javax.swing.JTextField taxPercentageField;
    private javax.swing.JTextField thresholdField;
    private javax.swing.JButton tierButton;
    private javax.swing.JTextField tierChargeAmountField;
    private javax.swing.JPanel tierDisplayPanel;
    private javax.swing.JTextField tierMaxAmountField;
    private javax.swing.JTextField tierMinAmountField;
    private javax.swing.JPanel tiersPanel;
    private javax.swing.JTree tiersTree;
    private javax.swing.JScrollPane tiersTreeScroller;
    private javax.swing.JTextField valueField;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTextField waivedPercentageField;
    private javax.swing.JButton waiverButton;
    private javax.swing.JComboBox<String> waiverConditionBox;
    private javax.swing.JPanel waiverDisplayPanel;
    private javax.swing.JComboBox waiverProductBox;
    private javax.swing.JPanel waiversPanel;
    private javax.swing.JTree waiversTree;
    private javax.swing.JScrollPane waiversTreeScroller;
    // End of variables declaration//GEN-END:variables
}
