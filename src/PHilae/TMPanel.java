/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TMPanel.java
 *
 * Created on Feb 22, 2012, 12:21:01 AM
 */
package PHilae;


import APX.PHController;
import APX.PHMain;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author Pecherk
 */
public class TMPanel extends javax.swing.JPanel
{

    private JDialog terminalsDialog = null;
    private final TDClient tDClient = new TDClient();
    private EITerminal eITerminal = new EITerminal();
    private TMAccount tMAccount = new TMAccount();

    /**
     * Creates new form EITerminal
     */
    public TMPanel()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        locationField = new javax.swing.JTextField();
        valueLabel = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        statusBox = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        modifiedByField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        dateModifiedField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        operatorBox = new javax.swing.JComboBox();
        buBox = new javax.swing.JComboBox();
        currenciesPanel = new javax.swing.JPanel();
        currencyTreeScroller = new javax.swing.JScrollPane();
        currencyTree = new javax.swing.JTree();
        jPanel3 = new javax.swing.JPanel();
        acctNameField = new javax.swing.JTextField();
        acctNoField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        cancelButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        saveButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        findBox = new javax.swing.JComboBox();
        findField = new javax.swing.JTextField();
        findButton = new javax.swing.JButton();
        terminalsScroller = new javax.swing.JScrollPane();
        terminalsTree = new javax.swing.JTree();
        jSeparator3 = new javax.swing.JSeparator();

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));

        jLabel1.setText("Device Location");

        valueLabel.setText("Branch Number");

        idField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                idFieldFocusLost(evt);
            }
        });

        jLabel7.setText("Terminal Status");

        statusBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Active", "Closed" }));

        jLabel8.setText("Last Modified By");

        modifiedByField.setEditable(false);
        modifiedByField.setForeground(new java.awt.Color(51, 102, 255));

        jLabel10.setText("Device Number");

        jLabel11.setText("Date Modified");

        dateModifiedField.setEditable(false);
        dateModifiedField.setForeground(new java.awt.Color(51, 102, 255));

        jLabel2.setText("Operator");

        operatorBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Agent", "Branch" }));

        buBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pick Branch Associated With This Terminal" }));

        currenciesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray), "Terminal Accounts"));

        currencyTreeScroller.setBorder(null);

        currencyTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Currencies");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("USD~US Dollar");
        treeNode1.add(treeNode2);
        currencyTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        currencyTree.setCellRenderer(new TRenderer());
        currencyTree.setRootVisible(false);
        currencyTree.setShowsRootHandles(true);
        currencyTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                currencyTreeValueChanged(evt);
            }
        });
        currencyTreeScroller.setViewportView(currencyTree);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));

        acctNameField.setEditable(false);

        acctNoField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                acctNoFieldFocusLost(evt);
            }
        });

        jLabel3.setText("Account Number");

        jLabel4.setText("Account Name");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(acctNoField)
                    .addComponent(acctNameField))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(acctNoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(acctNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout currenciesPanelLayout = new javax.swing.GroupLayout(currenciesPanel);
        currenciesPanel.setLayout(currenciesPanelLayout);
        currenciesPanelLayout.setHorizontalGroup(
            currenciesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, currenciesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currencyTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        currenciesPanelLayout.setVerticalGroup(
            currenciesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currenciesPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(currenciesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currencyTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(currenciesPanelLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(valueLabel)
                            .addComponent(jLabel10))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(locationField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(operatorBox, 0, 240, Short.MAX_VALUE))
                            .addComponent(buBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(currenciesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(statusBox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(modifiedByField))
                            .addComponent(dateModifiedField))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(operatorBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(locationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valueLabel)
                    .addComponent(buBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(modifiedByField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(statusBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(dateModifiedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currenciesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cancelButton.setText("Close");
        cancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelButtonActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveButtonActionPerformed(evt);
            }
        });

        jPanel2.setBackground(java.awt.Color.white);

        jLabel9.setText("Find By");

        findBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Terminal ID", "Branch No" }));
        findBox.setFocusable(false);

        findField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                findFieldActionPerformed(evt);
            }
        });

        findButton.setBackground(java.awt.Color.white);
        findButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/find.png"))); // NOI18N
        findButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                findButtonActionPerformed(evt);
            }
        });

        terminalsScroller.setBorder(null);
        terminalsScroller.setBorder(null);

        terminalsTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 5, 5));
        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("ATM Terminals");
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Add Terminal");
        treeNode1.add(treeNode2);
        terminalsTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        terminalsTree.setCellRenderer(new TRenderer());
        terminalsTree.setRootVisible(false);
        terminalsTree.setShowsRootHandles(true);
        terminalsTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                terminalsTreeValueChanged(evt);
            }
        });
        terminalsScroller.setViewportView(terminalsTree);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(findBox, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(findField, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(findButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jSeparator3)
            .addComponent(terminalsScroller)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(findBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findButton, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(terminalsScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 795, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2)
                    .addComponent(cancelButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void terminalsTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_terminalsTreeValueChanged
    {//GEN-HEADEREND:event_terminalsTreeValueChanged
        // TODO add your handling code here:
        displayTerminal();
}//GEN-LAST:event_terminalsTreeValueChanged

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
    {//GEN-HEADEREND:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        hideTerminalsDialog();
}//GEN-LAST:event_cancelButtonActionPerformed

    private void displayTerminal()
    {
        DefaultMutableTreeNode selectedTerminalNode = (DefaultMutableTreeNode) terminalsTree.getLastSelectedPathComponent();
        if (selectedTerminalNode != null)
        {
            Object selectedNode = selectedTerminalNode.getUserObject();
            if ("Add Terminal".equals(selectedNode))
            {
                eITerminal = new EITerminal();
                idField.setEditable(true);
                buBox.setEnabled(true);
                idField.setText("");
                locationField.setText("");
                operatorBox.setSelectedIndex(0);
                buBox.setSelectedIndex(0);
                statusBox.setSelectedIndex(0);
                modifiedByField.setText("");
                dateModifiedField.setText("");
                acctNoField.setText("");
                acctNameField.setText("");
                saveButton.setEnabled(true);
                saveButton.setText("Save");
                setCurrencyTree();
            }
            else if (selectedNode instanceof EITerminal)
            {
                eITerminal = (EITerminal) selectedNode;
                idField.setEditable(false);
                buBox.setEnabled(true);
                idField.setText(eITerminal.getTerminalId());
                locationField.setText(eITerminal.getLocation());
                operatorBox.setSelectedItem(eITerminal.getOperator());
                buBox.setSelectedItem(eITerminal.getBuCode() + " ~ " + eITerminal.getBuName());
                statusBox.setSelectedItem(eITerminal.getStatus());
                modifiedByField.setText(eITerminal.getModifiedBy());
                dateModifiedField.setText(new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss a").format(eITerminal.getDateModified()));
                saveButton.setText("Update");
                saveButton.setEnabled(true);
                setCurrencyTree();
            }
        }
    }

    public void showTerminalsDialog()
    {
        loadBusinessUnits();
        setTerminalsTree();
        terminalsTree.setSelectionRow(0);

        if (terminalsDialog == null)
        {
            terminalsDialog = new JDialog(PHMain.phFrame, PHController.posModule + " Terminals");
            terminalsDialog.setContentPane(this);
            terminalsDialog.pack();
            terminalsDialog.setResizable(false);
        }

        terminalsDialog.setIconImage(PHMain.phFrame.getIconImage());
        terminalsDialog.setLocationRelativeTo(PHMain.phFrame);
        terminalsDialog.setVisible(true);
    }

    public void hideTerminalsDialog()
    {
        terminalsDialog.setVisible(false);
        tDClient.dispose();
    }

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveButtonActionPerformed
    {//GEN-HEADEREND:event_saveButtonActionPerformed
        // TODO add your handling code here:
        if (idField.getText().trim().length() == 0)
        {
            JOptionPane.showMessageDialog(null, "Terminal number required.");
        }
        else if (locationField.getText().trim().length() == 0)
        {
            JOptionPane.showMessageDialog(null, "Terminal location required.");
        }
        else if (buBox.getSelectedIndex() == 0)
        {
            JOptionPane.showMessageDialog(null, "Associated branch required.");
        }
        else if (eITerminal.getAccounts().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Agent".equalsIgnoreCase(operatorBox.getSelectedItem().toString()) ? "Agent account required." : "Branch POS Ledger Required.");
        }
        else
        {
            eITerminal.setTerminalId(idField.getText().trim());
            eITerminal.setChannelCode(PHController.posChannelCode);
            eITerminal.setLocation(locationField.getText().trim().replaceAll("'", "''"));

            eITerminal.setOperator(operatorBox.getSelectedItem().toString());
            eITerminal.setBuCode(buBox.getSelectedItem().toString().split("~")[0].trim());

            eITerminal.setBuName(buBox.getSelectedItem().toString().split("~")[1].trim());
            eITerminal.setStatus(statusBox.getSelectedItem().toString());

            eITerminal.setModifiedBy(EILogin.getAdminName());
            eITerminal.setDateModified(new Date());

            if (tDClient.upsertTerminal(eITerminal))
            {
                showTerminal(eITerminal.getTerminalId());
                JOptionPane.showMessageDialog(PHMain.phFrame, "Terminal saved successfully.");
                refreshTerminals();
            }
            else
            {
                JOptionPane.showMessageDialog(PHMain.phFrame, "Failed to save terminal. Please refer to log for more details.", "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        }
}//GEN-LAST:event_saveButtonActionPerformed

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_findButtonActionPerformed
    {//GEN-HEADEREND:event_findButtonActionPerformed
        // TODO add your handling code here:
        searchTerminals();
    }//GEN-LAST:event_findButtonActionPerformed

    private void findFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_findFieldActionPerformed
    {//GEN-HEADEREND:event_findFieldActionPerformed
        // TODO add your handling code here:
        findButton.doClick();
    }//GEN-LAST:event_findFieldActionPerformed

    private void idFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_idFieldFocusLost
    {//GEN-HEADEREND:event_idFieldFocusLost
        // TODO add your handling code here:
        if (idField.getText().trim().length() > 0)
        {
            verifyTerminal();
        }
    }//GEN-LAST:event_idFieldFocusLost

    private void acctNoFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_acctNoFieldFocusLost
    {//GEN-HEADEREND:event_acctNoFieldFocusLost
        // TODO add your handling code here:
        if (acctNoField.getText().trim().length() > 0)
        {
            verifyAccount();
        }
    }//GEN-LAST:event_acctNoFieldFocusLost

    private void currencyTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_currencyTreeValueChanged
    {//GEN-HEADEREND:event_currencyTreeValueChanged
        // TODO add your handling code here:
        displayAccount(getSelectedCurrency());
    }//GEN-LAST:event_currencyTreeValueChanged

    public String getSelectedCurrency()
    {
        DefaultMutableTreeNode currencyNode = (DefaultMutableTreeNode) currencyTree.getLastSelectedPathComponent();
        return currencyNode != null ? currencyNode.getUserObject().toString().split("~")[0].trim() : PHController.PrimaryCurrencyCode;
    }

    public void setCurrencyTree()
    {
        DefaultMutableTreeNode currencyRootNode = ((DefaultMutableTreeNode) currencyTree.getModel().getRoot());
        currencyRootNode.removeAllChildren();

        tDClient.queryCurrencies().stream().forEach((currency)
                ->
                {
                    currencyRootNode.add(new DefaultMutableTreeNode(currency.getCurrencyCode() + "~" + currency.getCurrencyName()));
                });
        showAccount(PHController.PrimaryCurrencyCode);
        updateCurrencyTree();
    }

    public void updateCurrencyTree()
    {
        currencyTreeScroller.getHorizontalScrollBar().setValue(0);
        currencyTreeScroller.getVerticalScrollBar().setValue(0);
        currencyTree.updateUI();
    }

    private void displayAccount(String currencyCode)
    {
        if (eITerminal.getAccounts().containsKey(currencyCode))
        {
            tMAccount = eITerminal.getAccounts().get(currencyCode);
            acctNoField.setText(tMAccount.getAccountNumber());
            verifyAccount();
        }
        else
        {
            tMAccount = new TMAccount();
            tMAccount.setTerminalId(eITerminal.getTerminalId());
            tMAccount.setCurrency(currencyCode);
            acctNameField.setText("");
            acctNoField.setText("");
        }
    }

    private void verifyAccount()
    {
        acctNameField.setText("");
        if (!"".equals(acctNoField.getText().trim()))
        {
            final boolean isBranchTerminal = "Branch".equalsIgnoreCase(operatorBox.getSelectedItem().toString().trim());
            CNAccount cNAccount = isBranchTerminal ? tDClient.queryGLAccount(acctNoField.getText().trim()) : tDClient.queryDepositAccount(acctNoField.getText().trim());

            if (cNAccount.getAccountNumber() != null ? (!isBranchTerminal && !cNAccount.getCurrency().getCurrencyCode().equals(getSelectedCurrency())) : true)
            {
                JOptionPane.showMessageDialog(this, "Invalid or InActive terminal account!");
            }
            else
            {
                acctNameField.setText(tDClient.capitalize(cNAccount.getAccountName()));
                acctNoField.setText(cNAccount.getAccountNumber());
                tMAccount.setTerminalId(tMAccount.getTerminalId() != null ? tMAccount.getTerminalId() : eITerminal.getTerminalId());
                tMAccount.setCurrency(tMAccount.getCurrency() != null ? tMAccount.getCurrency() : getSelectedCurrency());
                tMAccount.setAccountNumber(acctNoField.getText());
                tMAccount.setAccountName(acctNameField.getText());
                eITerminal.getAccounts().put(tMAccount.getCurrency(), tMAccount);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField acctNameField;
    private javax.swing.JTextField acctNoField;
    private javax.swing.JComboBox buBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel currenciesPanel;
    private javax.swing.JTree currencyTree;
    private javax.swing.JScrollPane currencyTreeScroller;
    private javax.swing.JTextField dateModifiedField;
    private javax.swing.JComboBox findBox;
    private javax.swing.JButton findButton;
    private javax.swing.JTextField findField;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField locationField;
    private javax.swing.JTextField modifiedByField;
    private javax.swing.JComboBox operatorBox;
    private javax.swing.JButton saveButton;
    private javax.swing.JComboBox statusBox;
    private javax.swing.JScrollPane terminalsScroller;
    private javax.swing.JTree terminalsTree;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables

    private void verifyTerminal()
    {
        String terminalID = idField.getText().trim();
        if (PHController.getTerminals().containsKey(terminalID))
        {
            findField.setText(terminalID);
            findBox.setSelectedIndex(0);
            searchTerminals();
        }
    }

    private void loadBusinessUnits()
    {
        buBox.removeAllItems();
        buBox.addItem("Pick Branch Associated With This Terminal");
        tDClient.queryBusinessUnits().stream().forEach((branch)
                ->
                {
                    buBox.addItem(branch.getBuCode() + " ~ " + branch.getBuName());
                });
    }

    public void searchTerminals()
    {
        DefaultMutableTreeNode rootNode = ((DefaultMutableTreeNode) terminalsTree.getModel().getRoot());
        DefaultMutableTreeNode newTerminal = new DefaultMutableTreeNode("Add Terminal");

        rootNode.removeAllChildren();
        rootNode.add(newTerminal);

        boolean isTerminalFound = false;
        for (EITerminal terminal : PHController.getTerminals().values())
        {
            if (findBox.getSelectedIndex() == 0 ? terminal.getTerminalId().endsWith(findField.getText().trim()) : terminal.getBuCode().endsWith(findField.getText().trim()))
            {
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(terminal);
                rootNode.add(node);

                if (!isTerminalFound)
                {
                    terminalsTree.setSelectionPath(new TreePath(node.getPath()));
                    isTerminalFound = true;
                }
            }
        }

        terminalsScroller.getHorizontalScrollBar().setValue(0);
        terminalsScroller.getVerticalScrollBar().setValue(0);
        terminalsTree.updateUI();
    }

    public void setTerminalsTree()
    {
        PHController.loadTerminals();
        DefaultMutableTreeNode terminalRootNode = ((DefaultMutableTreeNode) terminalsTree.getModel().getRoot());
        DefaultMutableTreeNode newTerminal = new DefaultMutableTreeNode("Add Terminal");

        terminalRootNode.removeAllChildren();
        terminalRootNode.add(newTerminal);

        PHController.getTerminals().values().stream().map((terminal) -> new DefaultMutableTreeNode(terminal)).forEach((node)
                ->
                {
                    terminalRootNode.add(node);
                });

        terminalsScroller.getHorizontalScrollBar().setValue(0);
        terminalsScroller.getVerticalScrollBar().setValue(0);
        terminalsTree.updateUI();
    }

    private void showTerminal(String ID)
    {
        findField.setText("");
        setTerminalsTree();

        DefaultMutableTreeNode rootNode = ((DefaultMutableTreeNode) terminalsTree.getModel().getRoot());
        DefaultMutableTreeNode child = rootNode.getFirstLeaf();
        while (child != null)
        {
            if (child.getUserObject() instanceof EITerminal)
            {
                if (((EITerminal) child.getUserObject()).getTerminalId().equalsIgnoreCase(ID))
                {
                    terminalsTree.setSelectionPath(new TreePath(child.getPath()));
                    terminalsTree.updateUI();
                    return;
                }
            }
            child = child.getNextSibling();
        }
    }

    private void showAccount(String currencyCode)
    {
        DefaultMutableTreeNode rootNode = ((DefaultMutableTreeNode) currencyTree.getModel().getRoot());
        DefaultMutableTreeNode child = rootNode.getFirstLeaf();
        while (child != null)
        {
            if (child.getUserObject().toString().split("~")[0].trim().equalsIgnoreCase(currencyCode))
            {
                currencyTree.setSelectionPath(new TreePath(child.getPath()));
                currencyTree.updateUI();
                return;
            }
            child = child.getNextSibling();
        }
    }

    public void refreshTerminals()
    {
        //  HashMap<String, EITerminal> Map = new HashMap<>();
        PHController.getTerminals().clear();
        System.err.println("" + PHController.getTerminals().isEmpty());
        PHController.setTerminals(tDClient.loadTerminals("POS"));
       
        PHController.getTerminals().entrySet().stream().forEach((entry) ->
        {
            System.out.println(entry.getKey() + " : " + entry.getValue());
        });
    }

}
