/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * FLWorker.java
 *
 * Created on Mar 23, 2012, 1:07:50 PM
 */
package PHilae;

import APX.AXLogger;
import APX.BRFile;
import APX.PHController;
import static APX.PHController.RemoteFileUrl;
import APX.PHMain;
import Decoder.BASE64Decoder;
import Decoder.BASE64Encoder;
import FILELoad.CustomerData;
import FILELoad.*;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.RoundingMode;
import java.nio.charset.StandardCharsets;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.swing.JDialog;
import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTP;

/**
 *
 * @author Pecherk
 */
public final class FLWorker extends javax.swing.JPanel implements Runnable
{

    private SecretKey key;
    private Cipher cipher;

    private JDialog filesDialog = null;
    private final BRFile bRFile = new BRFile();
    private final TDClient tDClient = new TDClient();
    private final TXProcessor tXProcessor = new TXProcessor();

    private final BASE64Encoder base64encoder = new BASE64Encoder();
    private final BASE64Decoder base64decoder = new BASE64Decoder();
    public java.util.Date timestamp;
    public SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmm");
    private AXLogger aXLogger = new AXLogger(RemoteFileUrl, RemoteFileUrl);

    /**
     * Creates new form ATMFiles
     */
    public FLWorker()
    {
        initComponents();
        initEncryptor();
    }

    public void initEncryptor()
    {
        try
        {
            cipher = Cipher.getInstance("DESede");
            key = SecretKeyFactory.getInstance("DESede").generateSecret(new DESedeKeySpec("ThisIsSecretEncryptionKey".getBytes(StandardCharsets.UTF_8)));
        }
        catch (Exception ex)
        {
            logError(ex);
        }
    }

    public String encrypt(String plainText)
    {
        try
        {
            cipher.init(1, key);
            return base64encoder.encode(cipher.doFinal(plainText.getBytes(StandardCharsets.UTF_8)));
        }
        catch (Exception ex)
        {
            logError(ex);
        }
        return null;
    }

    public String decrypt(String encryptedString)
    {
        try
        {
            cipher.init(2, key);
            return new String(cipher.doFinal(base64decoder.decodeBuffer(encryptedString)), StandardCharsets.UTF_8);
        }
        catch (Exception ex)
        {
            logError(ex);
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        mobCustomersBox = new javax.swing.JCheckBox();
        accountsBox = new javax.swing.JCheckBox();
        customerAccountsBox = new javax.swing.JCheckBox();
        accountBalancesBox = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        extractButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        progressBar = new javax.swing.JProgressBar();
        agentsDataBox = new javax.swing.JCheckBox();

        mobCustomersBox.setText("Mobile Customer Data");

        accountsBox.setText("Accounts");

        customerAccountsBox.setText("Customer Accounts");

        accountBalancesBox.setText("Account Balances");

        extractButton.setText("Extract");
        extractButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                extractButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Close");
        cancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelButtonActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        progressBar.setToolTipText("");
        progressBar.setString("");
        progressBar.setStringPainted(true);

        agentsDataBox.setText("Agents Data");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(extractButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(agentsDataBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addComponent(mobCustomersBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addComponent(accountsBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(customerAccountsBox, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                            .addComponent(accountBalancesBox, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mobCustomersBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(accountsBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(accountBalancesBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(customerAccountsBox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(agentsDataBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(extractButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2)
                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void extractButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_extractButtonActionPerformed
    {//GEN-HEADEREND:event_extractButtonActionPerformed
        // TODO add your handling code here:
        new Thread(this::extractFiles).start();
}//GEN-LAST:event_extractButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
    {//GEN-HEADEREND:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        hideFilesDialog();
}//GEN-LAST:event_cancelButtonActionPerformed
    public boolean isTimeRight()
    {
        int hour = Integer.parseInt(new SimpleDateFormat("HH").format(PHController.getSystemDate()));
        int min = Integer.parseInt(new SimpleDateFormat("mm").format(PHController.getSystemDate()));

        return (hour == 9 && min == 00);

    }

    @Override
    public void run()
    {
        Thread.currentThread().setPriority(Thread.MIN_PRIORITY);
        while (true)
        {
            try
            {
                if ("Y".equalsIgnoreCase(PHController.synchBRData))
                {
                    sendOfflineFiles();
                }
                if (isTimeRight())
                {
                    tDClient.deleteFailedRecords();//where date is yesterday
                }
                Thread.sleep(PHController.posBalancesFileUpdateIntervalHH * 60000);

            }
            catch (Exception ex)
            {
                ex = null;
            }
        }
    }

    public void processAccounts()
    {
        StringBuilder buffer = new StringBuilder();
        if (accountsBox.isSelected())
        {
            progressBar.setString("Extracting Accounts Data...");
            accountsBox.setForeground(Color.red);
            accountsBox.updateUI();

            try ( ResultSet rset = tDClient.executeQueryToResultSet("SELECT A.ACCT_NO, D.PROD_SUBCAT_TY, E.CRNCY_CD, ' ' AS HOLD_RESPONSE_CODE, ' ' AS ACCOUNT_PRODUCT, ' ' AS EXTENDED_FIELDS, ' ' AS OVERDRAFT_LIMIT FROM " + PHController.CoreSchemaName + ".DEPOSIT_ACCOUNT_SUMMARY A, " + PHController.CoreSchemaName + ".ACCOUNT B, " + PHController.CoreSchemaName + ".PRODUCT C, " + PHController.CoreSchemaName + ".PRODUCT_TEMPLATE D, " + PHController.CoreSchemaName + ".CURRENCY E WHERE B.ACCT_ID=A.DEPOSIT_ACCT_ID AND C.PROD_ID=B.PROD_ID AND D.PROD_TEMPLATE_ID=C.PROD_TEMPLATE_ID AND E.CRNCY_ID=B.CRNCY_ID AND A.ACCT_NO IN (SELECT ACCT_NO FROM " + PHController.CoreSchemaName + ".V_DEPOSIT_ACCOUNT_DETAIL WHERE PROD_ID IN (" + PHController.posAllowedProductIDs + "))"))
            {
                while (rset.next())
                {
                    buffer.append(rset.getString("ACCT_NO")).append(",").append("SAV".equalsIgnoreCase(rset.getString("PROD_SUBCAT_TY")) ? "10" : "20").append(",").append(PHController.getCurrency(rset.getString("CRNCY_CD"))).append(",").append(rset.getString("HOLD_RESPONSE_CODE").trim()).append(",").append(rset.getString("ACCOUNT_PRODUCT").trim()).append(",").append(rset.getString("EXTENDED_FIELDS").trim()).append(",").append(rset.getString("OVERDRAFT_LIMIT").trim()).append("\r\n");
                }

                if (buffer.length() > 0)
                {
                    if (writeBufferToFile(buffer, PHController.posAccountsFileURL, "ACCOUNTS" + formatter.format(timestamp) + ".csv"))
                    {
                        accountsBox.setForeground(Color.blue);
                        accountsBox.setText("Accounts File Extracted");
                    }
                    else
                    {
                        accountsBox.setText("Accounts File Failed");
                    }
                }
                else
                {
                    accountsBox.setText("Accounts File Empty");
                }
            }
            catch (Exception e)
            {
                accountsBox.setText("Accounts File Failed");
                logError(e);
            }
            tDClient.dispose();
        }
    }

    public void processCustomerAccounts()
    {
        ArrayList<CustomerData> custData = new ArrayList<>();
        int success = 0, failed = 0, totalRecords = 0;
        CustomerData customerData;
        tXProcessor.gettXClient().connectToFileUploader();
        if (customerAccountsBox.isSelected())
        {
            progressBar.setString("Extracting Customer Accounts...");
            customerAccountsBox.setForeground(Color.red);
            customerAccountsBox.updateUI();

            try ( ResultSet rset = tDClient.executeQueryToResultSet("SELECT BU_CD,CUST_NO,ACCT_NO,NAMES,PROD_CD,ACCT_TYPE,IDENT_NO, ACCESS_CD,REC_EXIST,MSG_HEADER,OLD_ACCT_NO,PROD_ID "
                    + "FROM " + PHController.CMSchemaName + ".V_BREFT_CUSTOMER_DATA  ORDER BY 2"
            ))
            {
                while (rset.next())
                {
                    customerData = new CustomerData();
                    customerData.setOurBranchID(rset.getString(1));
                    customerData.setGroupID("1");
                    customerData.setClientID(rset.getString(2));
                    customerData.setAccountID(rset.getString(3));
                    customerData.setTitleOfAccount(rset.getString(4).replaceAll("'", ""));
                    customerData.setProductID(rset.getString(5));
                    customerData.setAccountType(rset.getString(6));
                    customerData.setNRC(rset.getString(7));
                    customerData.setATMCardNumber(rset.getString(8));
                    customerData.setUpdated(rset.getString(9));
                    customerData.setHeader(rset.getString(10));
                    customerData.setAccountIDOld(rset.getString(11));
                    custData.add(customerData);
                }
                for (CustomerData customerData2 : custData)
                {
                    String exist = customerData2.getUpdated().equals("0") ? (tDClient.isBRDataExisting(customerData2.getAccountID(), customerData2.getNRC()) ? "1" : "0") : "1";
                    String response = tXProcessor.gettXClient().customerData(customerData2.getOurBranchID(), customerData2.getGroupID(), customerData2.getClientID(),
                            customerData2.getAccountID(), customerData2.getTitleOfAccount(), customerData2.getProductID(), customerData2.getAccountType(),
                            customerData2.getNRC(), customerData2.getATMCardNumber(), exist, customerData2.getHeader(), customerData2.getAccountIDOld());

                    logEvent("Customer data sync \n CustomerAccounts = : " + customerData2.getAccountID() + "[" + customerData2.getNRC()
                            + "] \n record exist := " + exist + " \n client server response :=" + response);
                    if (tDClient.upsertCustData(customerData2, response))
                    {
                        totalRecords += 1;
                    }
                    if (response.equals("00"))
                    {
                        success += 1;
                    }
                    else
                    {
                        failed += 1;
                    }

                }
                logEvent("[CustomerAccounts Data] Total number of records = " + totalRecords + " \n\t\t>>Successful = " + success + "\n\t\t>>failed =  " + failed + "\n");
                customerAccountsBox.setForeground(failed > 0 ? Color.GREEN : Color.blue);
                customerAccountsBox.setText("Customer Accounts  Extracted");
            }
            catch (Exception e)
            {
                customerAccountsBox.setText("Customer Accounts Extraction Failed");
                logError(e);
            }
            tDClient.dispose();
        }

    }

    public void processAccountBalances()
    {
        StringBuilder buffer = new StringBuilder();
        if (accountBalancesBox.isSelected())
        {
            progressBar.setString("Extracting Account Balances...");
            accountBalancesBox.setForeground(Color.red);
            accountBalancesBox.updateUI();

            try ( ResultSet rset = tDClient.executeQueryToResultSet("select CUST_NO,ACCT_NO,LEDGER_BAL,AVAILABLE_BAL,REC_ST FROM " + PHController.CoreSchemaName + ".V_POS_BAL_FILE "))
            {
                while (rset.next())
                {
                    buffer.append(encrypt(rset.getString("CUST_NO").replaceFirst("^0+(?!$)", "") + "," + rset.getString("ACCT_NO") + "," + rset.getBigDecimal("LEDGER_BAL").setScale(0, RoundingMode.DOWN).toPlainString().replace(".", "") + "," + rset.getBigDecimal("AVAILABLE_BAL").setScale(0, RoundingMode.DOWN).toPlainString().replace(".", "") + "," + ("A".equalsIgnoreCase(rset.getString("REC_ST")) ? "0" : "1"))).append("\r\n");
                }
                if (buffer.length() > 0)
                {
                    timestamp = new java.util.Date();
                    String fileName = "ACCOUNTBALANCES" + formatter.format(timestamp) + ".csv";
                    if (writeBufferToFile(buffer, PHController.posBalancesFileURL, fileName))
                    {
                        if (uploadFile(fileName, PHController.posBalancesFileURL))
                        {
                            accountBalancesBox.setForeground(Color.blue);
                            accountBalancesBox.setText("Account Balances File Extracted");
                        }
                    }
                    else
                    {
                        accountBalancesBox.setText("Account Balances File Failed");
                    }
                }
                else
                {
                    accountBalancesBox.setText("Account Balances File Empty");
                }
            }
            catch (Exception e)
            {
                accountBalancesBox.setText("Account Balances File Failed");
                logError(e);
            }
            tDClient.dispose();
        }
    }

    public void processMobileCustomers()
    {
        ArrayList<MobileRegistration> mobileData = new ArrayList<>();
        MobileRegistration mobileRegistration;
        int success = 0, failed = 0, totalRecords = 0;

        tXProcessor.gettXClient().connectToFileUploader();
        if (mobCustomersBox.isSelected())
        {
            progressBar.setString("Extracting Customer Data...");
            mobCustomersBox.setForeground(Color.red);
            mobCustomersBox.updateUI();

            try ( ResultSet rset = tDClient.executeQueryToResultSet("SELECT FIRST_NM,MIDDLE_NM,LAST_NM,MOBILE_PHONE,ADDR_LINE_1,EMAIL_ADRESS,CITY_DESC,"
                    + "ACCT_NO,BU_CD,MAX_AMT,TXN_LIMIT,SOCIAL_SECURITY_NO,TXN_COUNT,TITLE_DESC,ADDRESS_TYPE,ACCESS_CD,CRNCY_CD,CUST_CAT,REC_EXIST,MSG_HEADER,OLD_ACCT_NO "
                    + "FROM " + PHController.CMSchemaName + ".V_BREFT_MOBILE_DATA WHERE PROD_ID IN (" + PHController.mobAllowedProductIDs + ") ORDER BY 1"
            ))
            {
                while (rset.next())
                {
                    mobileRegistration = new MobileRegistration();
                    mobileRegistration.setFirstName(rset.getString(1));
                    mobileRegistration.setMiddleName(rset.getString(2));
                    mobileRegistration.setLastName(rset.getString(3));
                    mobileRegistration.setMobileNumber(formatMobileNumber(rset.getString(4)));
                    mobileRegistration.setAddress(rset.getString(5));
                    mobileRegistration.setEMailID(rset.getString(6));
                    mobileRegistration.setCity(rset.getString(7));
                    mobileRegistration.setAccountID(rset.getString(8));
                    mobileRegistration.setBranchID(rset.getString(9));
                    mobileRegistration.setMaximumAmount(rset.getString(10));
                    mobileRegistration.setTransactionLimit(rset.getString(11));
                    mobileRegistration.setIDNumber(rset.getString(12));
                    mobileRegistration.setNoOfTransactions(rset.getString(13));
                    mobileRegistration.setTitle(rset.getString(14));
                    mobileRegistration.setTypeOfID(rset.getString(15));
                    mobileRegistration.setCardNumber(rset.getString(16));
                    mobileRegistration.setCurrencyID(rset.getString(17));
                    mobileRegistration.setCustomerType(rset.getString(18));
                    mobileRegistration.setUpdated(rset.getString(19));
                    mobileRegistration.setHeader(rset.getString(20));
                    mobileRegistration.setAccountIDOld(rset.getString(21));
                    mobileData.add(mobileRegistration);
                }
                for (MobileRegistration mobileRegistration2 : mobileData)
                {
                    String exist = tDClient.isBRMobDataExisting(mobileRegistration2.getAccountID(), mobileRegistration2.getCardNumber()) ? "1" : "0";
                    mobileRegistration2.setUpdated(exist);

                    String response = tXProcessor.gettXClient().mobileRegistration(mobileRegistration2.getFirstName(),
                            mobileRegistration2.getMiddleName(),
                            mobileRegistration2.getLastName(),
                            formatMobileNumber(mobileRegistration2.getMobileNumber()),
                            mobileRegistration2.getAddress(),
                            mobileRegistration2.getEMailID(),
                            mobileRegistration2.getCity(),
                            mobileRegistration2.getAccountID(),
                            mobileRegistration2.getBranchID(),
                            mobileRegistration2.getMaximumAmount(),
                            mobileRegistration2.getTransactionLimit(),
                            mobileRegistration2.getIDNumber(),
                            mobileRegistration2.getNoOfTransactions(),
                            mobileRegistration2.getTitle(),
                            mobileRegistration2.getTypeOfID(),
                            mobileRegistration2.getCardNumber(),
                            mobileRegistration2.getCurrencyID(),
                            mobileRegistration2.getCustomerType(),
                            mobileRegistration2.getUpdated(),
                            mobileRegistration2.getHeader(),
                            mobileRegistration2.getAccountIDOld());

                    logEvent("Mobile Registration sync \n CustomerAccounts = : " + mobileRegistration2.getAccountID() + "[" + mobileRegistration2.getIDNumber()
                            + "] \n mobile number :=" + mobileRegistration2.getMobileNumber() + " \n record exist := " + exist + " \n client server response :=" + response);
                    if (tDClient.upsertCustMobData(mobileRegistration2, response))
                    {
                        totalRecords += 1;
                    }
                    if (response.equals("00"))
                    {
                        success += 1;
                    }
                    else
                    {
                        failed += 1;
                    }
                }
                logEvent("[Mobile Customers] Total number of records = " + totalRecords + " \n\t\t>>Successful = " + success + "\n\t\t>>failed =  " + failed + "\n");

                mobCustomersBox.setForeground(failed > 0 ? Color.GREEN : Color.blue);
                mobCustomersBox.setText("Mobile Customers  Extracted");
            }
            catch (Exception e)
            {
                mobCustomersBox.setText("Mobile Customers Extraction Failed");
                logError(e);
            }
            tDClient.dispose();
        }
    }

    public void processMobileMigrationData()
    {
        ArrayList<MobileMigration> mobileMigrationData = new ArrayList<>();
        MobileMigration mobileMigration;
        int success = 0, failed = 0, totalRecords = 0;

        tXProcessor.gettXClient().connectToFileUploader();
        if (mobCustomersBox.isSelected())
        {
            progressBar.setString("Extracting Customer Data...");
            mobCustomersBox.setForeground(Color.red);
            mobCustomersBox.updateUI();

            try ( ResultSet rset = tDClient.executeQueryToResultSet("SELECT FIRST_NM,MIDDLE_NM,LAST_NM,MOBILE_PHONE,ADDR_LINE_1,EMAIL_ADRESS,CITY_DESC,"
                    + "ACCT_NO,BU_CD,MAX_AMT,TXN_LIMIT,SOCIAL_SECURITY_NO,TXN_COUNT,TITLE_DESC,ADDRESS_TYPE,ACCESS_CD,CRNCY_CD,CUST_CAT,REC_EXIST,MSG_HEADER,OLD_ACCT_NO "
                    + "FROM " + PHController.CMSchemaName + ".V_BREFT_MOBILE_DATA WHERE PROD_ID IN (" + PHController.mobAllowedProductIDs + ") ORDER BY 1"
            ))
            {
                while (rset.next())
                {
                    mobileMigration = new MobileMigration();
                    mobileMigration.setFirstName(rset.getString(1));
                    mobileMigration.setMiddleName(rset.getString(2));
                    mobileMigration.setLastName(rset.getString(3));
                    mobileMigration.setMobileNumber(formatMobileNumber(rset.getString(4)));
                    mobileMigration.setAddress(rset.getString(5));
                    mobileMigration.setEMailID(rset.getString(6));
                    mobileMigration.setCity(rset.getString(7));
                    mobileMigration.setAccountID(rset.getString(8));
                    mobileMigration.setBranchID(rset.getString(9));
                    mobileMigration.setMaximumAmount(rset.getString(10));
                    mobileMigration.setTransactionLimit(rset.getString(11));
                    mobileMigration.setIDNumber(rset.getString(12));
                    mobileMigration.setNoOfTransactions(rset.getString(13));
                    mobileMigration.setTitle(rset.getString(14));
                    mobileMigration.setTypeOfID(rset.getString(15));
                    mobileMigration.setCardNumber(rset.getString(16));
                    mobileMigration.setCurrencyID(rset.getString(17));
                    mobileMigration.setCustomerType(rset.getString(18));
                    mobileMigration.setUpdated(rset.getString(19));
                    mobileMigration.setHeader(rset.getString(20));
                    mobileMigration.setAccountIDOld(rset.getString(21));
                    mobileMigrationData.add(mobileMigration);
                }
                for (MobileMigration mobileMigration1 : mobileMigrationData)
                {
                    String exist = tDClient.isBRMobDataExisting(mobileMigration1.getAccountID(), mobileMigration1.getCardNumber()) ? "1" : "0";
                    mobileMigration1.setUpdated("2");

                    String response = tXProcessor.gettXClient().mobileMigration(mobileMigration1.getFirstName(),
                            mobileMigration1.getMiddleName(),
                            mobileMigration1.getLastName(),
                            formatMobileNumber(mobileMigration1.getMobileNumber()),
                            mobileMigration1.getAddress(),
                            mobileMigration1.getEMailID(),
                            mobileMigration1.getCity(),
                            mobileMigration1.getAccountID(),
                            mobileMigration1.getBranchID(),
                            mobileMigration1.getMaximumAmount(),
                            mobileMigration1.getTransactionLimit(),
                            mobileMigration1.getIDNumber(),
                            mobileMigration1.getNoOfTransactions(),
                            mobileMigration1.getTitle(),
                            mobileMigration1.getTypeOfID(),
                            mobileMigration1.getCardNumber(),
                            mobileMigration1.getCurrencyID(),
                            mobileMigration1.getCustomerType(),
                            mobileMigration1.getUpdated(),
                            mobileMigration1.getHeader(),
                            mobileMigration1.getAccountIDOld());

                    if (tDClient.saveBreftCustMobDatamIG(mobileMigration1, response))
                    {
                        totalRecords += 1;
                    }
                    if (response.equals("00"))
                    {
                        success += 1;
                    }
                    else
                    {
                        failed += 1;
                    }
                }
                logEvent("[Mobile Customers] Total number of records = " + totalRecords + " \n\t\t>>Successful = " + success + "\n\t\t>>failed =  " + failed + "\n");

                mobCustomersBox.setForeground(failed > 0 ? Color.GREEN : Color.blue);
                mobCustomersBox.setText("Mobile Customers  Extracted");
            }
            catch (Exception e)
            {
                mobCustomersBox.setText("Mobile Customers Extraction Failed");
                logError(e);
            }
            tDClient.dispose();
        }
    }

    public void processMobileDeregistration()
    {
        ArrayList<MobileDeregistration> deregistrationData = new ArrayList<>();
        MobileDeregistration deregistration;
        int success = 0, failed = 0, totalRecords = 0;

        tXProcessor.gettXClient().connectToFileUploader();
        if (mobCustomersBox.isSelected())
        {
            progressBar.setString("Extracting Customer Data...");
            mobCustomersBox.setForeground(Color.red);
            mobCustomersBox.updateUI();

            try ( ResultSet rset = tDClient.executeQueryToResultSet("SELECT CUST_NO,ACCESS_CD,'MOBILE DEREGISTRATION' REASON,'MOBILE DEREGISTRATION' EXTRA_PARAM "
                    + "FROM " + PHController.CoreSchemaName + ".CUSTOMER_CHANNEL_USER A, " + PHController.CoreSchemaName + ".CUSTOMER B"
                    + "WHERE  A.CUST_ID=B.CUST_ID AND A.REC_ST NOT IN ('A') AND TRUNC(A.ROW_TS) = TRUNC(SYSDATE) AND CUST_NO NOT IN ( SELECT CUST_NO FROM  " + PHController.CMSchemaName + ".BREFT_MOBILE_DEREGISTRATION"
            ))
            {
                while (rset.next())
                {
                    deregistration = new MobileDeregistration();
                    deregistration.setAccountID(rset.getString(1));
                    deregistration.setMobileNumber(formatMobileNumber(rset.getString(2)));
                    deregistration.setReason(rset.getString(3));
                    deregistration.setExtraParams(formatMobileNumber(rset.getString(4)));

                    deregistrationData.add(deregistration);
                }
                for (MobileDeregistration deregistration1 : deregistrationData)
                {
                    String exist = tDClient.isBRMobDataExisting(deregistration1.getAccountID(), deregistration1.getMobileNumber()) ? "1" : "0";

                    String response = tXProcessor.gettXClient().mobileDeregistration(formatMobileNumber(deregistration1.getMobileNumber()),
                            deregistration1.getAccountID(),
                            "Mobile Deregistration",
                            "Mobile Deregistration",
                            deregistration1.getHeader());

                    if (tDClient.saveBreftDeregistrationData(deregistration1, response))
                    {
                        totalRecords += 1;
                    }
                    if (response.equals("00"))
                    {
                        success += 1;
                    }
                    else
                    {
                        failed += 1;
                    }
                }
                logEvent("[Mobile Customers] Total number of records = " + totalRecords + " \n\t\t>>Successful = " + success + "\n\t\t>>failed =  " + failed + "\n");

                mobCustomersBox.setForeground(failed > 0 ? Color.GREEN : Color.blue);
                mobCustomersBox.setText("Mobile Customers  Extracted");
            }
            catch (Exception e)
            {
                mobCustomersBox.setText("Mobile Customers Extraction Failed");
                logError(e);
            }
            tDClient.dispose();
        }
    }

    public void processAgentData()
    {
        ArrayList<AgentData> agentDatum = new ArrayList<>();
        AgentData agentData;
        int success = 0, failed = 0, totalRecords = 0;

        tXProcessor.gettXClient().connectToFileUploader();
        if (agentsDataBox.isSelected())
        {
            progressBar.setString("Extracting Agents Data...");
            agentsDataBox.setForeground(Color.red);
            agentsDataBox.updateUI();

            try ( ResultSet rset = tDClient.executeQueryToResultSet("SELECT PROD_CD,CRNCY_CD,BU_CD,CUST_NO,CUST_ID,ACCT_NO,LEDGER_BAL,CUST_NM,"
                    + "BUSINESS_TYPE,ADDR_LINE_1,POSTAL_ADDRESS,CONTACT_PERSON,MOBILE_PHONE,OFFICE_PHONE,EMAIL_ADRESS,UPDATED_FG,MSG_HEADER,IDENT_NO,OLD_ACCT_NO,PROD_ID "
                    + "FROM " + PHController.CMSchemaName + ".V_BREFT_AGENT_DATA  ORDER BY 6"
            ))
            {
                while (rset.next())
                {
                    agentData = new AgentData();
                    agentData.setPRODUCTCODE(rset.getString(1));
                    agentData.setCURRENCY(rset.getString(2));
                    agentData.setBRANCHCODE(rset.getString(3));
                    agentData.setCODCUSTNAILID(rset.getString(4));
                    agentData.setAGENTID(rset.getString(5));
                    agentData.setAGENTACCOUNT(rset.getString(6));
                    agentData.setACCOUNTBAL(rset.getString(7));
                    agentData.setBUSINESSNAME(rset.getString(8));
                    agentData.setBUSINESSTYPE(rset.getString(9));
                    agentData.setPHYSICALADDRESS(rset.getString(10));
                    agentData.setPOSTALADDRESS(rset.getString(11));
                    agentData.setCONTACTPERSON(rset.getString(12));
                    agentData.setMOBILEPHONE(rset.getString(13));
                    agentData.setOFFICEPHONE(rset.getString(14));
                    agentData.setEMAILADDRESS(rset.getString(15));
                    agentData.setUpdated(rset.getString(16));
                    agentData.setHeader(rset.getString(17));
                    agentData.setNRC(rset.getString(18));
                    agentData.setAccountIDOld(rset.getString(19));
                    agentDatum.add(agentData);

                }
                for (AgentData agentData2 : agentDatum)
                {
                    String exist = tDClient.isBRAgentDataExisting(agentData2.getAGENTACCOUNT(), agentData2.getAGENTID()) ? "1" : "0";
                    agentData2.setUpdated(exist);

                    String response = tXProcessor.gettXClient().agentData(agentData2.getPRODUCTCODE(),
                            agentData2.getCURRENCY(),
                            agentData2.getBRANCHCODE(),
                            agentData2.getCODCUSTNAILID(),
                            agentData2.getAGENTID(),
                            agentData2.getAGENTACCOUNT(),
                            agentData2.getACCOUNTBAL(),
                            agentData2.getBUSINESSNAME(),
                            agentData2.getBUSINESSTYPE(),
                            agentData2.getPHYSICALADDRESS(),
                            agentData2.getPOSTALADDRESS(),
                            agentData2.getCONTACTPERSON(),
                            agentData2.getMOBILEPHONE(),
                            agentData2.getOFFICEPHONE(),
                            agentData2.getEMAILADDRESS(),
                            agentData2.getUpdated(),
                            agentData2.getHeader(),
                            agentData2.getNRC(), agentData2.getAccountIDOld());

                    logEvent("Agent Data sync \n CustomerAccounts = : " + agentData2.getAGENTACCOUNT() + "[" + agentData2.getAGENTID()
                            + "] \n mobile number :=" + agentData2.getMOBILEPHONE() + " \n record exist := " + exist + " \n client server response :=" + response);

                    if (tDClient.upsertAgentData(agentData2, response))
                    {
                        totalRecords += 1;
                    }
                    if (response.equals("00"))
                    {
                        success += 1;
                    }
                    else
                    {
                        failed += 1;
                    }
                }
                logEvent("[Agent Data] Total number of records = " + totalRecords + " \n\t\t>>Successful = " + success + "\n\t\t>>failed =  " + failed + "\n");

                agentsDataBox.setForeground(failed > 0 ? Color.GREEN : Color.blue);
                agentsDataBox.setText("Agent Data  Extracted");
            }
            catch (Exception e)
            {
                agentsDataBox.setText("Agent Data Extraction Failed");
                logError(e);
            }
            tDClient.dispose();
        }
    }

    private String getWebServiceObjectString(Object wsObject)
    {
        String wsObjectStr = "";
        wsObjectStr = ReflectionToStringBuilder.toString(wsObject, ToStringStyle.SHORT_PREFIX_STYLE);
        if (wsObjectStr.equals(""))
        {
            wsObjectStr = wsObject.toString();
        }
        return wsObjectStr;
    }

    private String formatMobileNumber(String foneNumber)
    {
        String phNumber;
        if (foneNumber.startsWith("+260"))
        {
            phNumber = "260".concat(foneNumber.substring(4));
        }
        else if (foneNumber.startsWith("0"))
        {
            phNumber = "260".concat(foneNumber.substring(1));
        }
        else
        {
            phNumber = foneNumber;
        }
        return phNumber;
    }

    private boolean writeBufferToFile(StringBuilder buffer, String directory, String fileName)
    {
        try
        {
            bRFile.writeToFile(new File(directory, fileName), buffer.toString());
            return true;
        }
        catch (Exception ex)
        {
            logError(ex);
        }
        return false;
    }

    public void showFilesDialog()
    {
        if (filesDialog == null)
        {
            filesDialog = new JDialog(PHMain.phFrame, "Switch Load Files");
            filesDialog.setIconImage(PHMain.phFrame.getIconImage());

            filesDialog.setContentPane(this);
            filesDialog.pack();

            filesDialog.setResizable(false);
            filesDialog.setLocationRelativeTo(PHMain.phFrame);
            filesDialog.setVisible(true);
        }
        else
        {
            filesDialog.setVisible(true);
        }
    }

    private void extractFiles()//synchronized
    {
        progressBar.setIndeterminate(true);
        processMobileCustomers();
        //   processMobileMigrationData();
        processCustomerAccounts();
        processAgentData();
        // processAccounts();
        processAccountBalances();

        // processAccountStatements();
        progressBar.setIndeterminate(false);
        progressBar.setValue(100);
        progressBar.setString("100% Completed");
    }

    public void sendOfflineFiles()
    {
        //   accountBalancesBox.setSelected(true);
        mobCustomersBox.setSelected(true);
        customerAccountsBox.setSelected(true);
        agentsDataBox.setSelected(true);
        extractFiles();
        tDClient.dispose();
    }

    public boolean uploadFile(String fileName, String fromDir)
    {
        boolean success = false;
        File outDir = new File(fromDir);

        File archDir = new File(PHController.RemoteFileUrl);
        if (!archDir.exists())
        {
            archDir.mkdirs();
        }

        File[] files = outDir.listFiles();
        for (File file : files)
        {
            logEvent(file.getName() + "~" + fileName);
            if (!file.renameTo(new File(archDir, file.getName())))
            {
                System.out.println("archiving the file");
                file.delete();
                success = true;
            }
        }
        return success;
    }
//    public boolean uploadFile(String fileName)
//    {
//        String server = "197.231.253.66"; //parameterise
//        int port = 21;
//        String user = "Admin";
//        String pass = "Admin";
//        boolean uploaded = false;
//        FTPClient ftpClient = new FTPClient();
//        try
//        {
//            ftpClient.connect(server, port);
//            ftpClient.login(user, pass);
//            ftpClient.enterLocalPassiveMode();
//
//            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
//
//            // APPROACH #1: uploads first file using an InputStream        
//            File firstLocalFile = new File(PHController.posBalancesFileURL.concat(fileName));
//            String firstRemoteFile = fileName;
//
//            try (InputStream inputStream = new FileInputStream(firstLocalFile))
//            {
//                uploaded = ftpClient.storeFile(firstRemoteFile, inputStream);
//            }
//            if (uploaded)
//            {
//                logEvent(firstRemoteFile + " has been Uploaded to the Server");
//
//                try
//                {
//                    if (ftpClient.isConnected())
//                    {
//                        ftpClient.logout();
//                        ftpClient.disconnect();
//                    }
//                }
//                catch (IOException ex)
//                {
//                    logEvent(firstRemoteFile + " Upload Failed" + ex);
//
//                }
//            }
//        }
//        catch (IOException ex)
//        {
//            logError(ex);
//        }
//        finally
//        {
//            try
//            {
//                if (ftpClient.isConnected())
//                {
//                    ftpClient.logout();
//                    ftpClient.disconnect();
//                }
//            }
//            catch (IOException ex)
//            {
//                ex.printStackTrace();
//            }
//        }
//        return uploaded;
//    }

    public void hideFilesDialog()
    {
        filesDialog.setVisible(false);
    }

    private void logError(Exception e)
    {

        if (PHMain.apxLog != null)
        {
            PHMain.apxLog.logEvent("ERROR", e);
        }
        else
        {
            e.printStackTrace();
        }
    }

    private void logEvent(Object e)
    {
        if (PHMain.apxLog != null)
        {
            PHMain.apxLog.logEvent("INFO", e);
        }
        else
        {
            System.out.println("Event " + e);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox accountBalancesBox;
    private javax.swing.JCheckBox accountsBox;
    private javax.swing.JCheckBox agentsDataBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox customerAccountsBox;
    private javax.swing.JButton extractButton;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JCheckBox mobCustomersBox;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables
}
