/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BRFrameMOB.java
 *
 * Created on Jun 20, 2011, 11:07:55 PM
 */
package Mobile;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListModel;
import static javax.swing.SwingConstants.LEFT;
import static javax.swing.SwingConstants.RIGHT;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import org.jpos.iso.ISOMsg;
import org.jpos.iso.gui.ISOMeter;
import org.jpos.iso.gui.ISOMsgPanel;

/**
 *
 * @author Pecherk
 */
public class BRFrameMOB extends javax.swing.JFrame
{

    ListModel txnLog = null;
    ArrayList<EITxnMOB> txnList = new ArrayList();
    private final EILoginMOB eiLogin = new EILoginMOB(new TDClientMOB());
    private final BSPanelMOB settingsPanel = new BSPanelMOB(MOBController.Module);

    /**
     * Creates new form MAINFrame
     */
    public BRFrameMOB()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        xapiTxnPanel = new javax.swing.JPanel();
        eiTxnTableScroller = new javax.swing.JScrollPane();
        xapiTxnTable = new javax.swing.JTable();
        chargesDialog = new javax.swing.JDialog();
        mainSplitPane = new javax.swing.JSplitPane();
        treePanel = new javax.swing.JPanel();
        txnTreeScroller = new javax.swing.JScrollPane();
        txnTree = new javax.swing.JTree();
        treeSeparator = new javax.swing.JSeparator();
        treeLabel = new javax.swing.JLabel();
        rightSplitPane = new javax.swing.JSplitPane();
        msgSplitPane = new javax.swing.JSplitPane();
        receivedMessagePanel = new javax.swing.JPanel();
        incomingTableScroller = new javax.swing.JScrollPane();
        incomingTable = new javax.swing.JTable();
        responseMessagePanel = new javax.swing.JPanel();
        outgoingTableScroller = new javax.swing.JScrollPane();
        outgoingTable = new javax.swing.JTable();
        displayScroller = new javax.swing.JScrollPane();
        leftToolBar = new javax.swing.JToolBar();
        shutdownButton = new javax.swing.JButton();
        aboutButton = new javax.swing.JButton();
        isometerToolBar = new javax.swing.JToolBar();
        menuBar = new javax.swing.JMenuBar();
        bridgeMenu = new javax.swing.JMenu();
        shutdownMenuItem = new javax.swing.JMenuItem();
        agencyMenu = new javax.swing.JMenu();
        agencySettingsMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        chargesMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        eiTerminalMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        extractDataFilesMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        suspendServiceCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        aboutMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        xapiTxnPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Processed Transactions"), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));

        eiTxnTableScroller.setBorder(null);

        xapiTxnTable.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));
        xapiTxnTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Field", "Content", "Description"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        eiTxnTableScroller.setViewportView(xapiTxnTable);

        incomingTableScroller.setViewportView(new ISOMsgPanel(new ISOMsg()).createISOMsgTable());

        javax.swing.GroupLayout xapiTxnPanelLayout = new javax.swing.GroupLayout(xapiTxnPanel);
        xapiTxnPanel.setLayout(xapiTxnPanelLayout);
        xapiTxnPanelLayout.setHorizontalGroup(
            xapiTxnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 669, Short.MAX_VALUE)
            .addGap(0, 669, Short.MAX_VALUE)
            .addGroup(xapiTxnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(eiTxnTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE))
        );
        xapiTxnPanelLayout.setVerticalGroup(
            xapiTxnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 249, Short.MAX_VALUE)
            .addGap(0, 249, Short.MAX_VALUE)
            .addGroup(xapiTxnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(eiTxnTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE))
        );

        chargesDialog.setTitle("POS Charges");
        chargesDialog.setIconImage(getIconImage());
        chargesDialog.setModal(true);
        chargesDialog.setName("chargesDialog"); // NOI18N

        javax.swing.GroupLayout chargesDialogLayout = new javax.swing.GroupLayout(chargesDialog.getContentPane());
        chargesDialog.getContentPane().setLayout(chargesDialogLayout);
        chargesDialogLayout.setHorizontalGroup(
            chargesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        chargesDialogLayout.setVerticalGroup(
            chargesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        chargesDialog.setContentPane(new Mobile.TCPanelMOB());
        chargesDialog.pack();
        chargesDialog.setResizable(false);
        chargesDialog.setLocationRelativeTo(this);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("PHilae Mobile Bridge ~ Neptune Software");
        setForeground(java.awt.Color.white);
        setIconImage(Toolkit.getDefaultToolkit().createImage(getClass().getResource("/images/icon.png")));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        mainSplitPane.setDividerLocation(145);
        mainSplitPane.setDividerSize(8);
        mainSplitPane.setMinimumSize(new java.awt.Dimension(145, 3));

        treePanel.setBackground(java.awt.Color.white);
        treePanel.setMinimumSize(new java.awt.Dimension(145, 0));
        treePanel.setName(""); // NOI18N
        treePanel.setPreferredSize(new java.awt.Dimension(145, 523));

        txnTree.setBorder(null);
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Transactions");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Approved");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Rejected");
        treeNode1.add(treeNode2);
        txnTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        txnTree.setAutoscrolls(true);
        txnTree.setCellRenderer(new Mobile.TRendererMOB());
        txnTree.setRootVisible(false);
        txnTree.setShowsRootHandles(true);
        txnTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                txnTreeValueChanged(evt);
            }
        });
        txnTreeScroller.setViewportView(txnTree);
        showTxnTree();

        treeLabel.setBackground(new java.awt.Color(102, 204, 255));
        treeLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        treeLabel.setForeground(java.awt.Color.white);
        treeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        treeLabel.setText("Activity");
        treeLabel.setOpaque(true);

        javax.swing.GroupLayout treePanelLayout = new javax.swing.GroupLayout(treePanel);
        treePanel.setLayout(treePanelLayout);
        treePanelLayout.setHorizontalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(treeSeparator)
            .addComponent(txnTreeScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
            .addComponent(treeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        treePanelLayout.setVerticalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treePanelLayout.createSequentialGroup()
                .addComponent(treeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(treeSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txnTreeScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE))
        );

        mainSplitPane.setLeftComponent(treePanel);

        rightSplitPane.setBorder(null);
        rightSplitPane.setDividerLocation(425);
        rightSplitPane.setDividerSize(8);
        rightSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        rightSplitPane.setResizeWeight(1.0);
        rightSplitPane.setToolTipText("");

        msgSplitPane.setBorder(null);
        msgSplitPane.setDividerLocation(208);
        msgSplitPane.setDividerSize(8);
        msgSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        msgSplitPane.setResizeWeight(0.5);

        receivedMessagePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "Received Message", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11)), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2))); // NOI18N

        incomingTableScroller.setBorder(null);

        incomingTable.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));
        incomingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Field", "Content", "Description"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        incomingTableScroller.setViewportView(incomingTable);

        incomingTableScroller.setViewportView(new ISOMsgPanel(new ISOMsg()).createMobISOMsgTable());

        javax.swing.GroupLayout receivedMessagePanelLayout = new javax.swing.GroupLayout(receivedMessagePanel);
        receivedMessagePanel.setLayout(receivedMessagePanelLayout);
        receivedMessagePanelLayout.setHorizontalGroup(
            receivedMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 715, Short.MAX_VALUE)
            .addGroup(receivedMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(incomingTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 715, Short.MAX_VALUE))
        );
        receivedMessagePanelLayout.setVerticalGroup(
            receivedMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 182, Short.MAX_VALUE)
            .addGroup(receivedMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(incomingTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE))
        );

        msgSplitPane.setLeftComponent(receivedMessagePanel);

        responseMessagePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "Response Message", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11)), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2))); // NOI18N

        outgoingTableScroller.setBorder(null);

        outgoingTable.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));
        outgoingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Field", "Content", "Description"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        outgoingTableScroller.setViewportView(outgoingTable);

        outgoingTableScroller.setViewportView(new ISOMsgPanel(new ISOMsg()).createMobISOMsgTable());

        javax.swing.GroupLayout responseMessagePanelLayout = new javax.swing.GroupLayout(responseMessagePanel);
        responseMessagePanel.setLayout(responseMessagePanelLayout);
        responseMessagePanelLayout.setHorizontalGroup(
            responseMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outgoingTableScroller, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 715, Short.MAX_VALUE)
        );
        responseMessagePanelLayout.setVerticalGroup(
            responseMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outgoingTableScroller, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
        );

        msgSplitPane.setRightComponent(responseMessagePanel);

        rightSplitPane.setLeftComponent(msgSplitPane);

        displayConsole.setEditable(false);
        displayConsole.setBackground(new java.awt.Color(204, 255, 204));
        displayScroller.setViewportView(displayConsole);

        rightSplitPane.setRightComponent(displayScroller);

        mainSplitPane.setRightComponent(rightSplitPane);

        leftToolBar.setFloatable(false);
        leftToolBar.setRollover(true);

        shutdownButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit64.png"))); // NOI18N
        shutdownButton.setToolTipText("Shutdown");
        shutdownButton.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));
        shutdownButton.setFocusable(false);
        shutdownButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        shutdownButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        shutdownButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                shutdownButtonActionPerformed(evt);
            }
        });
        leftToolBar.add(shutdownButton);

        aboutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/help64.png"))); // NOI18N
        aboutButton.setToolTipText("About");
        aboutButton.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(0, 2, 0, 0), javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray)));
        aboutButton.setFocusable(false);
        aboutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        aboutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        aboutButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aboutButtonActionPerformed(evt);
            }
        });
        leftToolBar.add(aboutButton);

        isometerToolBar.setBorder(null);
        isometerToolBar.setFloatable(false);
        isometerToolBar.setRollover(true);
        isometerToolBar.setToolTipText("");
        isometerToolBar.setOpaque(false);

        setIsoMeters();

        bridgeMenu.setMnemonic('P');
        bridgeMenu.setText("Ruby");

        shutdownMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        shutdownMenuItem.setMnemonic('E');
        shutdownMenuItem.setText("Exit");
        shutdownMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                shutdownMenuItemActionPerformed(evt);
            }
        });
        bridgeMenu.add(shutdownMenuItem);

        menuBar.add(bridgeMenu);

        agencyMenu.setMnemonic('O');
        agencyMenu.setText("Mobile");

        agencySettingsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        agencySettingsMenuItem.setMnemonic('S');
        agencySettingsMenuItem.setText("Mobile Settings");
        agencySettingsMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agencySettingsMenuItemActionPerformed(evt);
            }
        });
        agencyMenu.add(agencySettingsMenuItem);
        agencyMenu.add(jSeparator1);

        chargesMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        chargesMenuItem.setMnemonic('C');
        chargesMenuItem.setText("Mobile Charges");
        chargesMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chargesMenuItemActionPerformed(evt);
            }
        });
        agencyMenu.add(chargesMenuItem);
        agencyMenu.add(jSeparator4);

        eiTerminalMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        eiTerminalMenuItem.setMnemonic('T');
        eiTerminalMenuItem.setText("Proc. Codes Config");
        eiTerminalMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                eiTerminalMenuItemActionPerformed(evt);
            }
        });
        agencyMenu.add(eiTerminalMenuItem);
        agencyMenu.add(jSeparator2);

        extractDataFilesMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        extractDataFilesMenuItem.setMnemonic('F');
        extractDataFilesMenuItem.setText("Biller Codes Config");
        extractDataFilesMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                extractDataFilesMenuItemActionPerformed(evt);
            }
        });
        agencyMenu.add(extractDataFilesMenuItem);
        agencyMenu.add(jSeparator3);

        suspendServiceCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, java.awt.event.InputEvent.ALT_MASK));
        suspendServiceCheckBoxMenuItem.setMnemonic('U');
        suspendServiceCheckBoxMenuItem.setText("Suspend Service");
        suspendServiceCheckBoxMenuItem.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                suspendServiceCheckBoxMenuItemItemStateChanged(evt);
            }
        });
        agencyMenu.add(suspendServiceCheckBoxMenuItem);

        suspendServiceCheckBoxMenuItem.setSelected("Y".equalsIgnoreCase(Mobile.MOBController.SuspendMOB));
        suspendServiceCheckBoxMenuItem.setText("Y".equalsIgnoreCase(Mobile.MOBController.SuspendMOB) ? "Resume Service" : "Suspend Service");

        menuBar.add(agencyMenu);

        aboutMenu.setMnemonic('A');
        aboutMenu.setText("About");
        aboutMenu.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aboutMenuActionPerformed(evt);
            }
        });

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, java.awt.event.InputEvent.ALT_MASK));
        aboutMenuItem.setText("About Mobile");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aboutMenuItemActionPerformed(evt);
            }
        });
        aboutMenu.add(aboutMenuItem);

        menuBar.add(aboutMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(leftToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(565, 565, 565)
                        .addComponent(isometerToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(mainSplitPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(isometerToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(leftToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                .addContainerGap())
        );

        updateDisplay();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void shutdownButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shutdownButtonActionPerformed
    {//GEN-HEADEREND:event_shutdownButtonActionPerformed
        // TODO add your handling code here:
//       if (eiLogin.isUserAdmin("Mobile Shutdown"))
//       {
        BRMainMOB.shutdown();

        //  }
    }//GEN-LAST:event_shutdownButtonActionPerformed

    private void txnTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_txnTreeValueChanged
    {//GEN-HEADEREND:event_txnTreeValueChanged
        // TODO add your handling code here:
        try
        {
            updateDisplay();
        }
        catch (Exception ex)
        {
            ex = null;
        }
    }//GEN-LAST:event_txnTreeValueChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        // TODO add your handling code here:
        SwingUtilities.invokeLater(shutdownButton::doClick);
    }//GEN-LAST:event_formWindowClosing

    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutButtonActionPerformed
    {//GEN-HEADEREND:event_aboutButtonActionPerformed
        // TODO add your handling code here:
        showAboutInfo();
    }//GEN-LAST:event_aboutButtonActionPerformed

    private void shutdownMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shutdownMenuItemActionPerformed
    {//GEN-HEADEREND:event_shutdownMenuItemActionPerformed
        // TODO add your handling code here:
        SwingUtilities.invokeLater(shutdownButton::doClick);
    }//GEN-LAST:event_shutdownMenuItemActionPerformed

    private void aboutMenuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutMenuActionPerformed
    {//GEN-HEADEREND:event_aboutMenuActionPerformed
        // TODO add your handling code here:
        SwingUtilities.invokeLater(aboutButton::doClick);
    }//GEN-LAST:event_aboutMenuActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutMenuItemActionPerformed
    {//GEN-HEADEREND:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        SwingUtilities.invokeLater(aboutButton::doClick);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    public void setIsoMeters()
    {
        isometerToolBar.removeAll();
        isometerToolBar.add(getBridgeIsoMeter());
        SwingUtilities.invokeLater(()
                ->
                {
                    try
                    {
                        Thread.sleep(50);
                        isometerToolBar.updateUI();
                    }
                    catch (Exception ex)
                    {
                        ex = null;
                    }
                });
    }

    private void suspendServiceCheckBoxMenuItemItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_suspendServiceCheckBoxMenuItemItemStateChanged
    {//GEN-HEADEREND:event_suspendServiceCheckBoxMenuItemItemStateChanged
        // TODO add your handling code here:
        if (eiLogin.isUserAdmin("Suspend Bridge"))
        {
            if (suspendServiceCheckBoxMenuItem.isSelected() != "Y".equalsIgnoreCase(MOBController.SuspendMOB))
            {
                MOBController.SuspendMOB = suspendServiceCheckBoxMenuItem.isSelected() ? "Y" : "N";
                BRMainMOB.restartMobBridge();
            }
            suspendServiceCheckBoxMenuItem.setText("Y".equalsIgnoreCase(MOBController.SuspendMOB) ? "Resume Service" : "Suspend Service");
        }
    }//GEN-LAST:event_suspendServiceCheckBoxMenuItemItemStateChanged

    private void agencySettingsMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agencySettingsMenuItemActionPerformed
    {//GEN-HEADEREND:event_agencySettingsMenuItemActionPerformed
        // TODO add your handling code here:
        if (eiLogin.isUserAdmin(capitalize(MOBController.Module) + " Settings"))
        {
            settingsPanel.showSettingsDialog();
        }
    }//GEN-LAST:event_agencySettingsMenuItemActionPerformed

    private void chargesMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chargesMenuItemActionPerformed
    {//GEN-HEADEREND:event_chargesMenuItemActionPerformed
        // TODO add your handling code here:
        if (eiLogin.isUserAdmin(capitalize(MOBController.Module) + " Charges"))
        {
            showChargesDialog();
        }
    }//GEN-LAST:event_chargesMenuItemActionPerformed

    private void extractDataFilesMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_extractDataFilesMenuItemActionPerformed
    {//GEN-HEADEREND:event_extractDataFilesMenuItemActionPerformed
        // TODO add your handling code here:
        if (eiLogin.isUserAdmin(capitalize(MOBController.Module) + " Biller Codes"))
        {
            // fLWorker.showFilesDialog();
            billerPanel.showBillerCodeDialog();
        }
    }//GEN-LAST:event_extractDataFilesMenuItemActionPerformed

    private void eiTerminalMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_eiTerminalMenuItemActionPerformed
    {//GEN-HEADEREND:event_eiTerminalMenuItemActionPerformed
        // TODO add your handling code here:
        if (eiLogin.isUserAdmin(capitalize(MOBController.Module) + " Custom Processing Codes"))
        {
            procCodePanel.showProcCodeDialog();
        }
    }//GEN-LAST:event_eiTerminalMenuItemActionPerformed

    public void showChargesDialog()
    {
        // TODO add your handling code here:
        chargesDialog.setIconImage(getIconImage());
        SwingUtilities.invokeLater(()
                ->
                {
                    ((TCPanelMOB) chargesDialog.getContentPane()).displayCharge();
                    chargesDialog.setVisible(true);
                });
    }

    public void hideChargesDialog()
    {
        // TODO add your handling code here:
        SwingUtilities.invokeLater(()
                ->
                {
                    chargesDialog.setVisible(false);
                });
    }

    public String capitalize(String text)
    {
        if (text != null)
        {
            try
            {
                StringBuilder builder = new StringBuilder();
                for (String word : text.toLowerCase().split("\\s"))
                {
                    builder.append(word.substring(0, 1).toUpperCase()).append(word.substring(1).toLowerCase()).append(" ");
                }
                return builder.toString();
            }
            catch (Exception ex)
            {
                return text;
            }
        }
        return text;
    }

    public void setBridgeIsoMeter(ISOMeter bridgeMeter)
    {
        int i = isometerToolBar.getComponentIndex(getBridgeIsoMeter());
        isometerToolBar.remove(getBridgeIsoMeter());
        isometerToolBar.add(bridgeMeter, i);
        mobBridgeIsoMeter = bridgeMeter;
        isometerToolBar.validate();

    }

    private ISOMsg getTxnMessage(String txnRef, boolean isIncoming, boolean isReversal)
    {
        int tranCount = txnLog.getSize();
        for (int i = 0;i < tranCount;i++)
        {
            ISOMsg msg = (ISOMsg) txnLog.getElementAt(i);
            String MTI = msg.getMTI();

            if (msg.getTxnReference().equals(txnRef) && (msg.isIncoming() == isIncoming) && ((MTI.equalsIgnoreCase("9420") || MTI.equalsIgnoreCase("9421") || MTI.equalsIgnoreCase("0420") || MTI.equalsIgnoreCase("0421")) == isReversal))
            {
                return msg;
            }
        }

        return null;
    }

    public void insertTxnToTree(ISOMsg txnMsg)
    {
        try
        {
            int count;
            EITxnMOB eiTxn;
            DefaultMutableTreeNode txnNode;
            DefaultMutableTreeNode txnRootNode = ((DefaultMutableTreeNode) txnTree.getModel().getRoot());
            DefaultMutableTreeNode approvedNode = (DefaultMutableTreeNode) txnRootNode.getFirstChild();
            DefaultMutableTreeNode rejectedNode = (DefaultMutableTreeNode) txnRootNode.getLastChild();

            if (txnMsg.getResponseCode() == null ? false : EICodesMOB.ISO_APPROVED.equals(txnMsg.getResponseCode()))
            {
                count = approvedNode.getChildCount();
                for (int i = 0;i < count;i++)
                {
                    txnNode = (DefaultMutableTreeNode) approvedNode.getChildAt(i);
                    eiTxn = (EITxnMOB) txnNode.getUserObject();

                    if (eiTxn.getProcessingCode().equals(txnMsg.getProcessingCode()))
                    {
                        txnNode.insert(new DefaultMutableTreeNode(txnMsg), 0);
                        break;
                    }
                }
            }
            else
            {
                count = rejectedNode.getChildCount();
                for (int i = 0;i < count;i++)
                {
                    txnNode = (DefaultMutableTreeNode) rejectedNode.getChildAt(i);
                    eiTxn = (EITxnMOB) txnNode.getUserObject();

                    if (eiTxn.getProcessingCode().equals(txnMsg.getProcessingCode()))
                    {
                        txnNode.insert(new DefaultMutableTreeNode(txnMsg), 0);
                        break;
                    }
                }
            }

            txnTreeScroller.getHorizontalScrollBar().setValue(0);
            updateTreeUI();
        }
        catch (Exception ex)
        {
            updateDisplay();
        }
    }

    private void removeTxnFromLog(ISOMsg msg)
    {
        try
        {
            ListModel log = (DefaultListModel) BRMainMOB.mobbridgeIsoMeter.getLogList() == null ? BRMainMOB.loadBridgeTxnLog() : (DefaultListModel) BRMainMOB.mobbridgeIsoMeter.getLogList();
            ((DefaultListModel) log).removeElement(msg);
        }
        catch (Exception e)
        {
            e = null;
        }
    }

    public void showTxnTree()
    {
        try
        {
            if (BRMainMOB.mobbridgeIsoMeter != null && !"Y".equalsIgnoreCase(MOBController.SuspendMOB))
            {
                txnLog = BRMainMOB.mobbridgeIsoMeter.getLogList();
            }
            else
            {
                txnLog = BRMainMOB.loadBridgeTxnLog();
            }
            if (txnLog.getSize() <= 0)
            {
                txnLog = BRMainMOB.loadBridgeTxnLog();
            }

            txnList.clear();
            DefaultMutableTreeNode txnRootNode = ((DefaultMutableTreeNode) txnTree.getModel().getRoot());

            DefaultMutableTreeNode approvedNode = (DefaultMutableTreeNode) txnRootNode.getFirstChild();
            DefaultMutableTreeNode rejectedNode = (DefaultMutableTreeNode) txnRootNode.getLastChild();

            approvedNode.removeAllChildren();
            rejectedNode.removeAllChildren();

            txnList.add(new EITxnMOB("03", "Mobile Payments"));
            txnList.add(new EITxnMOB("31", "Balance Inquiry"));

            txnList.add(new EITxnMOB("38", "Ministatement Inquiry"));
            txnList.add(new EITxnMOB("40", "Funds Transfer"));

            txnList.add(new EITxnMOB("91", "Check Book Request"));

            boolean isFirstTxnFound = false;
            for (EITxnMOB eITxn : txnList)
            {
                DefaultMutableTreeNode[] nodes = getTxnNodes(eITxn);
                approvedNode.add(nodes[0]);
                rejectedNode.add(nodes[1]);

                if (!isFirstTxnFound)
                {
                    txnTree.scrollPathToVisible(new TreePath(((DefaultMutableTreeNode) approvedNode.getFirstChild()).getPath()));
                    txnTree.scrollPathToVisible(new TreePath(((DefaultMutableTreeNode) rejectedNode.getFirstChild()).getPath()));
                }

                if (!nodes[0].isLeaf())
                {
                    txnTree.scrollPathToVisible(new TreePath(((DefaultMutableTreeNode) nodes[0].getFirstChild()).getPath()));
                    if (!isFirstTxnFound)
                    {
                        txnTree.setSelectionPath(new TreePath(((DefaultMutableTreeNode) nodes[0].getFirstChild()).getPath()));
                        isFirstTxnFound = true;
                    }
                }
                if (!nodes[1].isLeaf())
                {
                    txnTree.scrollPathToVisible(new TreePath(((DefaultMutableTreeNode) nodes[1].getFirstChild()).getPath()));
                    if (!isFirstTxnFound)
                    {
                        txnTree.setSelectionPath(new TreePath(((DefaultMutableTreeNode) nodes[1].getFirstChild()).getPath()));
                        isFirstTxnFound = true;
                    }
                }
            }

            txnTreeScroller.getHorizontalScrollBar().setValue(0);
            txnTreeScroller.getVerticalScrollBar().setValue(0);

            txnTreeScroller.setBorder(null);
            updateTreeUI();
        }
        catch (Exception ex)
        {
            if (BRMainMOB.mobbridgeIsoMeter != null && !"Y".equalsIgnoreCase(MOBController.SuspendMOB))
            {
                BRMainMOB.mobbridgeIsoMeter.setLogList(new DefaultListModel());
            }
        }
    }

    public String getTxnDescription(String procCode)
    {
        for (EITxnMOB eITxn : txnList)
        {
            if (eITxn.getProcessingCode().equals(procCode))
            {
                return eITxn.getTxnDescription();
            }
        }
        return "";
    }

    private DefaultMutableTreeNode[] getTxnNodes(EITxnMOB eiTxn)
    {
        DefaultMutableTreeNode approvedTxnNode = new DefaultMutableTreeNode(eiTxn.getClone(true));
        DefaultMutableTreeNode rejectedTxnNode = new DefaultMutableTreeNode(eiTxn.getClone(false));

        if (txnLog != null)
        {
            int tranCount = txnLog.getSize();
            String procCode = ((EITxnMOB) approvedTxnNode.getUserObject()).getProcessingCode();

            for (int i = 0;i < tranCount;i++)
            {
                ISOMsg txnMsg = (ISOMsg) txnLog.getElementAt(i);
                if ((txnMsg.getProcessingCode() == null ? procCode == null : txnMsg.getProcessingCode().equals(procCode)) && txnMsg.isOutgoing())
                {
                    if (txnMsg.getResponseCode() == null ? false : EICodesMOB.ISO_APPROVED.equals(txnMsg.getResponseCode()))
                    {
                        approvedTxnNode.insert(new DefaultMutableTreeNode(txnMsg), 0);
                    }
                    else
                    {
                        rejectedTxnNode.insert(new DefaultMutableTreeNode(txnMsg), 0);
                    }
                }
            }
        }

        return new DefaultMutableTreeNode[]
        {
            approvedTxnNode, rejectedTxnNode
        };
    }
  private JTable createMyTable(String type,String ID)
    {
        Vector dataVector = new Vector();
        Vector rowVector = new Vector();
        Vector<String> colsVector = new Vector<>();

        rowVector.add(type);
        rowVector.add(ID);
        
        dataVector.insertElementAt(rowVector, 0);

        JTable table = new JTable();
        Font tableFont = table.getTableHeader().getFont();
        table.getTableHeader().setFont(new Font(tableFont.getName(), Font.BOLD, tableFont.getSize()));

        colsVector.add("procCode");
        colsVector.add("desc");       
       

        table.setModel(new javax.swing.table.DefaultTableModel(dataVector, colsVector)
        {
            @Override
            public Class<?> getColumnClass(int col)
            {
                if (col == 0 || col == 1 || col == 13)
                {
                    return Integer.class;
                }
                return String.class;
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return false;
            }
        });
        for (int i = 1;i < colsVector.size();i++)
        {
            table.getColumnModel().getColumn(i).setMinWidth((i == colsVector.size() - 1) ? 150 : 150);
        }

        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));

        table.setPreferredScrollableViewportSize(new Dimension(1200, table.getRowCount() * table.getRowHeight()));
        return prepareTable(table);
    }
    public void updateDisplay()
    {
        try
        {
            if (!"Y".equalsIgnoreCase(MOBController.SuspendMOB))
            {
                txnLog = BRMainMOB.mobbridgeIsoMeter.getLogList();
            }
            else
            {
                txnLog = BRMainMOB.loadBridgeTxnLog();
            }
        }
        catch (Exception ex)
        {
            txnLog = new DefaultListModel();
        }
        try
        {
            DefaultMutableTreeNode selectedTxnNode = (DefaultMutableTreeNode) txnTree.getLastSelectedPathComponent();
            if (selectedTxnNode != null)
            {
                Object selectedObject = selectedTxnNode.getUserObject();
                if (selectedObject instanceof ISOMsg)
                {
                    int splitLoc = rightSplitPane.getDividerLocation();
                    rightSplitPane.setLeftComponent(msgSplitPane);
                    rightSplitPane.setDividerLocation(splitLoc);

                    DefaultMutableTreeNode xapiTxnNode = (DefaultMutableTreeNode) selectedTxnNode.getParent();
                    EITxnMOB eiTxn = (EITxnMOB) xapiTxnNode.getUserObject();

                    receivedMessagePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, eiTxn.getTxnDescription() + " Request", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11)), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));
                    responseMessagePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, eiTxn.getTxnDescription() + " Response", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11)), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));

                    ISOMsg selMsg = ((ISOMsg) selectedObject);
                    String MTI = selMsg.getMTI();
                    ISOMsg incMsg = getTxnMessage(selMsg.getTxnReference(), true, (MTI.equalsIgnoreCase("9430") || MTI.equalsIgnoreCase("9431") || MTI.equalsIgnoreCase("0430") || MTI.equalsIgnoreCase("0431")));

                    if (incMsg == null)
                    {
                        SwingUtilities.invokeLater(()
                                ->
                                {
                                    removeTxnFromLog(selMsg);
                                    txnTree.removeSelectionPath(new TreePath(selectedTxnNode.getPath()));
                                });
                        return;
                    }
                    incomingTableScroller.setViewportView(new ISOMsgPanel(incMsg).createMobISOMsgTable());
                    outgoingTableScroller.setViewportView(new ISOMsgPanel((ISOMsg) selectedObject).createMobISOMsgTable());
                   
                }
                else if (selectedObject instanceof EITxnMOB)
                {
                    EITxnMOB eiTxn = (EITxnMOB) selectedObject;
                    int splitLoc = rightSplitPane.getDividerLocation();

                    rightSplitPane.setLeftComponent(xapiTxnPanel);
                    rightSplitPane.setDividerLocation(splitLoc);

                    if (eiTxn.isApproved())
                    {
                        xapiTxnPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Approved " + eiTxn.getTxnDescription()), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));
                    }
                    else
                    {
                        xapiTxnPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Rejected " + eiTxn.getTxnDescription()), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2)));
                    }

                    eiTxnTableScroller.setViewportView(createMessagesTable(eiTxn));
                }
                txnTree.setBorder(null);
                txnTreeScroller.setBorder(null);
            }
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
    }

    public JTable createMessagesTable(EITxnMOB eiTxn)
    {
        Vector dataVector = new Vector();
        if (txnLog != null)
        {
            String prevMonth = "00";
            int tranCount = txnLog.getSize();
            String procCode = eiTxn.getProcessingCode();

            for (int i = 0;i < tranCount;i++)
            {
                Vector rowVector = new Vector();
                ISOMsg txnMsg = (ISOMsg) txnLog.getElementAt(i);
                if ((txnMsg.getProcessingCode() == null ? procCode == null : txnMsg.getProcessingCode().equals(procCode)) && txnMsg.isOutgoing())
                {
                    if ((EICodesMOB.ISO_APPROVED.equals(txnMsg.getResponseCode())) == eiTxn.isApproved())
                    {
                        String MTI;
                        String date = txnMsg.getTransmissionTime() != null ? txnMsg.getTransmissionTime() : "          ";
                        String txnMonth = date.substring(0, 2);

                        int year = Calendar.getInstance().get(Calendar.YEAR);
                        prevMonth = (txnMonth.equals("01")) ? "01" : prevMonth;

                        year = (txnMonth.equals("12") && prevMonth.equals("01")) ? (year - 1) : year;
                        String yearStr = (String.valueOf(year).length() == 2) ? "20" + String.valueOf(year) : String.valueOf(year);
                        String currency = (MOBController.getCurrency(txnMsg.getTxnCurrency()) != null) ? String.valueOf(MOBController.getCurrency(txnMsg.getTxnCurrency())) : "";

                        try
                        {
                            MTI = "0000" + String.valueOf((Integer.parseInt(txnMsg.getMTI()) - 10));
                            MTI = MTI.substring(MTI.length() - 4);
                        }
                        catch (Exception ex)
                        {
                            MTI = "";
                        }

                        rowVector.add(MTI);
                        rowVector.add(txnMsg.getProcessingCode() + txnMsg.getAccountType1() + txnMsg.getAccountType2());
                        rowVector.add(txnMsg.getTxnReference());
                        rowVector.add(yearStr + "-" + date.substring(0, 2) + "-" + date.substring(2, 4) + " " + date.substring(4, 6) + ":" + date.substring(6, 8) + ":" + date.substring(8, 10));
                        rowVector.add(txnMsg.getAcquirerBIN());
                        rowVector.add(txnMsg.getTerminalID());
                        rowVector.add(protectCard(txnMsg.getAccessCode()));
                        rowVector.add(txnMsg.getAccountNumber1());
                        rowVector.add(txnMsg.getAccountNumber2());
                        rowVector.add(currency);
                        rowVector.add(txnMsg.getTxnAmount());
                        rowVector.add(eiTxn.getTxnDescription());
                        rowVector.add((MTI.equalsIgnoreCase("9420") || MTI.equalsIgnoreCase("9421") || MTI.equalsIgnoreCase("0420") || MTI.equalsIgnoreCase("0421")) ? "Y" : "N");
                        rowVector.add(txnMsg.getResponseCode());
                        dataVector.insertElementAt(rowVector, 0);

                    }
                }
            }
        }

        JTable table = new JTable();
        Font tableFont = table.getTableHeader().getFont();
        table.getTableHeader().setFont(new Font(tableFont.getName(), Font.BOLD, tableFont.getSize()));

        Vector<String> colsVector = new Vector<>();
        colsVector.add("MTI");
        colsVector.add("Processing Code");
        colsVector.add("Reference No.");
        colsVector.add("Date & Time");
        colsVector.add("Acquirer BIN");
        colsVector.add("Terminal ID");
        colsVector.add("Access Code");
        colsVector.add("Account Number");
        colsVector.add("Transfer Account");
        colsVector.add("Txn Currency");
        colsVector.add("Txn Amount");
        colsVector.add("Description");
        colsVector.add("Reversal");
        colsVector.add("Response Code");

        table.setModel(new javax.swing.table.DefaultTableModel(dataVector, colsVector)
        {
            @Override
            public Class<?> getColumnClass(int col)
            {
                if (col == 10)
                {
                    return BigDecimal.class;
                }
                if (col == 0 || col == 1 || col == 13)
                {
                    return Integer.class;
                }
                return String.class;
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return false;
            }
        });

        for (int i = 1;i < colsVector.size();i++)
        {
            table.getColumnModel().getColumn(i).setMinWidth((i == colsVector.size() - 1) ? 150 : 150);
        }

        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));

        table.setPreferredScrollableViewportSize(new Dimension(1200, table.getRowCount() * table.getRowHeight()));
        return prepareTable(table);
    }

    public static JTable prepareTable(JTable table)
    {
        table.getTableHeader().setFont(new Font(table.getTableHeader().getFont().getName(), Font.BOLD, table.getTableHeader().getFont().getSize()));
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table.setAutoCreateRowSorter(true);
        for (int i = 0;i < table.getColumnCount();i++)
        {
            final boolean firstColumn = i == 0;
            table.getColumnModel().getColumn(i).setCellRenderer(new DefaultTableCellRenderer()
            {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
                {
                    JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                    label.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 5));
                    if (firstColumn)
                    {
                        label.setFont(new Font(label.getFont().getName(), Font.BOLD, label.getFont().getSize()));
                        label.setBackground(new java.awt.Color(0, 204, 204));
                    }
                    label.setHorizontalAlignment((value instanceof Integer || value instanceof BigDecimal || value instanceof Number) ? RIGHT : LEFT);
                    return label;
                }
            });
        }
        return table;
    }

    private void updateTreeUI()
    {
        SwingUtilities.invokeLater(txnTree::updateUI);
    }

    /**
     * @return the bridgeIsoMeter
     */
    public ISOMeter getBridgeIsoMeter()
    {
        return mobBridgeIsoMeter;
    }

    public String protectCard(String cardNumber)
    {
        try
        {
            for (int i = 6;i < cardNumber.length() - 3;i++)
            {
                cardNumber = cardNumber.substring(0, i) + "X" + cardNumber.substring(i + 1);
            }
        }
        catch (Exception ex)
        {
            ex = null;
        }
        return cardNumber;
    }

    private void showAboutInfo()
    {
        JOptionPane.showMessageDialog(null,
                "<html><font face=\"Arial\" weight=\"plain\" size=\"2\">PHilae Mobile Bridge version 2.5.0, Product licensed to FINCA, Lusaka ZAMBIA"
                + "<br/>Copyright \u00A9 2011 - " + new SimpleDateFormat("yyyy").format(new Date()) + ", Neptune Software Group, 7th floor Victoria Towers,"
                + "<br/>Kilimanjaro Road, Upperhill, Nairobi Kenya. All rights reserved.</font></html>", "PHilae POS Bridge", JOptionPane.INFORMATION_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenu agencyMenu;
    private javax.swing.JMenuItem agencySettingsMenuItem;
    private javax.swing.JMenu bridgeMenu;
    public javax.swing.JDialog chargesDialog;
    private javax.swing.JMenuItem chargesMenuItem;
    public static final javax.swing.JTextPane displayConsole = Mobile.BRMainMOB.displayArea;
    private javax.swing.JScrollPane displayScroller;
    private javax.swing.JMenuItem eiTerminalMenuItem;
    private javax.swing.JScrollPane eiTxnTableScroller;
    private javax.swing.JMenuItem extractDataFilesMenuItem;
    private javax.swing.JTable incomingTable;
    private javax.swing.JScrollPane incomingTableScroller;
    private javax.swing.JToolBar isometerToolBar;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JToolBar leftToolBar;
    private javax.swing.JSplitPane mainSplitPane;
    public javax.swing.JMenuBar menuBar;
    private javax.swing.JSplitPane msgSplitPane;
    private javax.swing.JTable outgoingTable;
    private javax.swing.JScrollPane outgoingTableScroller;
    private javax.swing.JPanel receivedMessagePanel;
    private javax.swing.JPanel responseMessagePanel;
    private javax.swing.JSplitPane rightSplitPane;
    private javax.swing.JButton shutdownButton;
    private javax.swing.JMenuItem shutdownMenuItem;
    private javax.swing.JCheckBoxMenuItem suspendServiceCheckBoxMenuItem;
    private javax.swing.JLabel treeLabel;
    private javax.swing.JPanel treePanel;
    private javax.swing.JSeparator treeSeparator;
    private javax.swing.JTree txnTree;
    private javax.swing.JScrollPane txnTreeScroller;
    private javax.swing.JPanel xapiTxnPanel;
    private javax.swing.JTable xapiTxnTable;
    // End of variables declaration//GEN-END:variables

    private final TMPanelMOB tMPanel = new TMPanelMOB();
    private final EIProcCodePanelMOB procCodePanel = new EIProcCodePanelMOB();
    private final EIBillerPanelMOB billerPanel = new EIBillerPanelMOB();
    private final FLWorkerMOB fLWorker = new FLWorkerMOB();
    private ISOMeter mobBridgeIsoMeter = new ISOMeter(null, "MOB", "SUSPENDED");
}
